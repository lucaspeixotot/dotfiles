# See https://www.loraserver.io/loraserver/install/config/ for a full
# configuration example and documentation.

[general]
# Log level
#
# debug=5, info=4, warning=3, error=2, fatal=1, panic=0
log_level=4


[postgresql]
dsn="postgres://loraserver_ns:loraserver_ns@postgresql/loraserver_ns?sslmode=disable"

[redis]
url="redis://redis:6379"

[network_server]
net_id="010203"
deduplication_delay="200ms"
device_session_ttl="744h0m0s"
get_downlink_data_delay="100ms"

[network_server.band]
# LoRaWAN band to use.
#
# Valid values are:
# *	AS_923
name="AU_915_928"
# * CN_470_510
# * CN_779_787
# * EU_433
# * EU_863_870
# * IN_865_867
# * KR_920_923
# * RU_864_870
#  name="US_902_928"
#name="EU_863_870"

dwell_time_400ms=false
# Enforce repeater compatibility
#
# Most band configurations define the max payload size for both an optional
# repeater encapsulation layer as for setups where a repeater will never
# be used. The latter case increases the max payload size for some data-rates.
# In case a repeater might used, set this flag to true.
repeater_compatible=false


[network_server.network_settings]
installation_margin=10
rx1_delay=1
rx1_dr_offset=0
rx2_dr=8
rx2_frequency=923300000
enabled_uplink_channels=[0,1,2,3,4,5,6,7]

[network_server.api]
# ip:port to bind the api server
bind="0.0.0.0:8000"
# ca certificate used by the api server (optional)
ca_cert=""
# tls certificate used by the api server (optional)
tls_cert=""
# tls key used by the api server (optional)
tls_key=""
# Gateway API
#
# This API is used by the LoRa Channel Manager component to fetch
# channel configuration.

[network_server.gateway.api]
# ip:port to bind the api server
bind="0.0.0.0:8002"
# CA certificate used by the api server (optional)
ca_cert=""
# tls certificate used by the api server (optional)
tls_cert=""
# tls key used by the api server (optional)
tls_key=""
# JWT secret used by the gateway api server for gateway authentication / authorization
jwt_secret="verysecret"

# Gateway statistics settings.
[network_server.gateway.stats]
# Create non-existing gateways on receiving of stats
#
# When set to true, LoRa Server will create the gateway when it receives
# statistics for a gateway that does not yet exist.
create_gateway_on_stats=true
# Aggregation timezone
#
# This timezone is used for correctly aggregating the statistics (for example
# 'Europe/Amsterdam').
# To get the list of supported timezones by your PostgreSQL database,
# execute the following SQL query:
# select * from pg_timezone_names;
# When left blank, the default timezone of your database will be used.
timezone=""
# Aggregation intervals to use for aggregating the gateway stats
#
# Valid options: second, minute, hour, day, week, month, quarter, year.
# When left empty, no statistics will be stored in the database.
# Note, LoRa App Server expects at least "minute", "day", "hour"!
aggregation_intervals=["minute", "hour", "day"]
# MQTT gateway backend settings.
#
# This is the backend communicating with the LoRa gateways over a MQTT broker.


[network_server.gateway.backend.mqtt]
uplink_topic_template="gateway/+/rx"
downlink_topic_template="gateway/{{ .MAC }}/tx"
stats_topic_template="gateway/+/stats"
ack_topic_template="gateway/+/ack"

server="tcp://mosquitto:1883"
username=""
password=""

qos=0
clean_session=true
client_id=""
ca_cert=""
tls_cert=""
tls_key=""

[join_server.default]
server="http://appserver:8003"

# ca certificate used by the default join-server client (optional)

ca_cert=""
# tls certificate used by the default join-server client (optional)
tls_cert=""
# tls key used by the default join-server client (optional)
tls_key=""

# Network-controller configuration.
[network_controller]
# hostname:port of the network-controller api server (optional)
server=""
# ca certificate used by the network-controller client (optional)
ca_cert=""
# tls certificate used by the network-controller client (optional)
tls_cert=""
# tls key used by the network-controller client (optional)
tls_key=""

[geolocation_server]
server="geoserver:8005"
