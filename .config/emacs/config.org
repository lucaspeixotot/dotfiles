#+TITLE: Peixoto's GNU Emacs Config
#+AUTHOR: Lucas Peixoto de Almeida Cavalcante (lucaspeixotot)
#+DESCRIPTION: lucaspeixotot's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#packages][PACKAGES]]
- [[#backup][BACKUP]]
- [[#no-tabs][NO TABS]]
- [[#evil][EVIL]]
- [[#diminish][DIMINISH]]
- [[#treesit][TREESIT]]
- [[#gui][GUI]]
- [[#theme][THEME]]
- [[#dashboard][Dashboard]]
- [[#font][FONT]]
- [[#zooming][Zooming]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#projectile][PROJECTILE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#buffer-move][BUFFER MOVE]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#org-mode][ORG MODE]]
- [[#auto-complete][AUTO COMPLETE]]
- [[#dired][DIRED]]
- [[#flycheck][FLYCHECK]]
- [[#plugins][PLUGINS]]
  - [[#general][GENERAL]]
  - [[#avy][AVY]]
  - [[#key-chord][KEY CHORD]]
  - [[#which-key][WHICH-KEY]]
  - [[#sudo-edit][SUDO EDIT]]
  - [[#all-the-icons][ALL THE ICONS]]
- [[#languages][LANGUAGES]]
  - [[#cc][C/C++]]
- [[#treesiter-customization][TREESITER CUSTOMIZATION]]
- [[#doom-modeline][Doom modeline]]
- [[#doom-themes][Doom themes]]
- [[#neotree][Neotree]]
- [[#yasnippet][Yasnippet]]

* PACKAGES
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src

* BACKUP
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.emacs-backup-files")))
#+end_src

* NO TABS
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+end_src

* EVIL
#+begin_src emacs-lisp
(use-package undo-fu
  :ensure t)

  (use-package evil
    :ensure t
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (evil-global-set-key 'normal "ga" 'avy-goto-char)
    (evil-global-set-key 'normal "gr" 'xref-find-references)
    (evil-global-set-key 'normal "gi" 'eglot-code-action-organize-imports)
    (evil-global-set-key 'normal "g]" 'flymake-goto-next-error)
    (evil-global-set-key 'normal "g[" 'flymake-goto-prev-error)
    (evil-global-set-key 'normal "gf" 'eglot-rename)
)

  ;;; Vim Bindings Everywhere else
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-want-integration t)
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  (use-package evil-escape
    :ensure t
    :config
    (evil-escape-mode 1)
    (setq-default evil-escape-key-sequence "fd")
  )

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)
#+end_src


* DIMINISH
#+begin_src emacs-lisp
(use-package diminish
:ensure t
:config
(diminish 'which-key-mode)
(diminish 'counsel-mode)
(diminish 'ivy-mode)
(diminish 'org-indent-mode)
(diminish 'evil-escape-mode)
)
#+end_src

* TREESIT
#+begin_src emacs-lisp
(use-package treesit-auto
:ensure t
:config
(global-treesit-auto-mode))
#+end_src

* GUI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* THEME
#+begin_src emacs-lisp
;(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
;(load-theme 'magonyx t)
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
   :ensure t 
   :init
   (setq initial-buffer-choice 'dashboard-open)
   (setq dashboard-set-heading-icons t)
   (setq dashboard-set-file-icons t)
   (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
   ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
   ;; (setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
   (setq dashboard-center-content nil) ;; set to 't' for centered content
   (setq dashboard-items '((recents . 5)
                           (agenda . 5 )
                           (bookmarks . 3)
                           (projects . 3)
                           (registers . 3)))
   :custom
   (dashboard-modify-heading-icons '((recents . "file-text")
                                     (bookmarks . "book")))
   :config
   (dashboard-setup-startup-hook))
#+end_src

* FONT
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

* Zooming
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* RELOAD EMACS
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* PROJECTILE
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1))
#+end_src

* SHELLS AND TERMINALS

** Vterm
#+begin_src emacs-lisp
  (use-package vterm
   :ensure t
   :config
   (setq shell-file-name "/usr/bin/zsh"
      vterm-max-scrollback 50000))
#+end_src

** Vterm-Toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
  :ensure t
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* BUFFER MOVE
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* IVY (COUNSEL)
#+begin_src emacs-lisp
    (use-package counsel
    :ensure t
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :ensure t
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

* ORG MODE
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
#+end_src

#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

* AUTO COMPLETE
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :defer 2
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 1)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :ensure t
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :ensure t
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
#+end_src

* FLYCHECK
#+begin_src emacs-lisp
;; (use-package flycheck
;;   :ensure t
;;   :defer t
;;   :init (global-flycheck-mode))
#+end_src

* PLUGINS
** GENERAL
#+begin_src emacs-lisp
        (use-package general
          :config
          (general-evil-setup)
          (general-create-definer cfg/leader-keys
            :states '(normal insert visual emacs)
            :keymaps 'override
            :prefix "SPC"
            :global-prefix "M-SPC") 

          (cfg/leader-keys
          "." '(find-file :wk "Find file")
	      "SPC" '(counsel-M-x :wk "Counsel M-x")
          "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
          "f r" '(counsel-recentf :wk "Find recent files")
          "TAB TAB" '(comment-line :wk "Comment lines"))

          (cfg/leader-keys
            "b" '(:ignore t :wk "buffer")
            "b b" '(switch-to-buffer :wk "Switch buffer")
            "b i" '(ibuffer :wk "ibuffer")
            "b k" '(kill-this-buffer :wk "Kill this buffer")
            "b n" '(next-buffer :wk "Next buffer")
            "b p" '(previous-buffer :wk "Previous buffer")
            "b r" '(revert-buffer :wk "Reload buffer")
          )

      (cfg/leader-keys
          "e" '(:ignore t :wk "Evaluate")    
          "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
          "e d" '(eval-defun :wk "Evaluate defun containing or after point")
          "e e" '(eval-expression :wk "Evaluate and elisp expression")
          "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
          "e r" '(eval-region :wk "Evaluate elisp in region")) 

    (cfg/leader-keys
        "h" '(:ignore t :wk "Help")
        "h f" '(describe-function :wk "Describe function")
        "h v" '(describe-variable :wk "Describe variable")
        ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
        "h r r" '(reload-init-file :wk "Reload emacs config"))

    (cfg/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")
      "t v" '(vterm-toggle : "Toggle vterm")
      "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
      )

  (cfg/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right"))
  
(cfg/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (cfg/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (cfg/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))
  )

(cfg/leader-keys
"p" '(projectile-command-map :wk "Projectile"))

(cfg/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))

(cfg/leader-keys
""
)
#+end_src

** AVY
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    )
#+end_src

** KEY CHORD
#+begin_src emacs-lisp
(use-package key-chord
  :ensure t
  :config
  (key-chord-mode 1)
  ;; (key-chord-define evil-normal-state-map "ga" 'avy-goto-char)
  ;; (key-chord-define evil-visual-state-map "fd" 'evil-change-to-previous-state)
  ;; (key-chord-define evil-insert-state-map "fd" 'evil-normal-state)
  ;; (key-chord-define evil-replace-state-map "fd" 'evil-normal-state)
  ;; (key-chord-define-global "xx" 'avy-goto-char)
  ;; (key-chord-define-global "xl" 'avy-goto-line)
  )
#+end_src

** WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → " )
  )
 #+end_src
 
** SUDO EDIT
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
      (cfg/leader-keys
        "fu" '(sudo-edit-find-file :wk "Sudo find file")
        "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

** ALL THE ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* LANGUAGES
** C/C++
#+begin_src emacs-lisp
(use-package c-ts-mode
  :ensure t
  :hook ((c-ts-mode . eglot-ensure)
	 (c-ts-mode . company-mode))
  :mode (("\\.c\\'" . c-ts-mode)
	 ("\\.h\\'" . c-ts-mode)
	 )
:config
(setq treesit-font-lock-level 4)
(setq c-ts-mode-indent-offset 4)
  )

;; (use-package flycheck-clang-analyzer
;;   :ensure t
;;   :after flycheck
;;   :config (flycheck-clang-analyzer-setup))
#+end_src

* TREESITER CUSTOMIZATION
#+begin_src emacs-lisp
#+end_src

* Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+end_src

* Doom themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-badger t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* Neotree
#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        neo-window-position (quote right)
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil))))
)
#+end_src

* Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :hook
  (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all)
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets")))
#+end_src

