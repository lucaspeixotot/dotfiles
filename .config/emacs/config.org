#+TITLE: Peixoto's GNU Emacs Config
#+AUTHOR: Lucas Peixoto de Almeida Cavalcante (lucaspeixotot)
#+DESCRIPTION: lucaspeixotot's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#packages][PACKAGES]]
- [[#backup][BACKUP]]
- [[#no-tabs][NO TABS]]
- [[#evil][EVIL]]
- [[#diminish][DIMINISH]]
- [[#treesit][TREESIT]]
- [[#gui][GUI]]
- [[#theme][THEME]]
- [[#dashboard][Dashboard]]
- [[#smooth-scrolling][Smooth scrolling]]
- [[#zooming][Zooming]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#projectile][PROJECTILE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
  - [[#multi-vterm][Multi vterm]]
- [[#buffer-move][BUFFER MOVE]]
- [[#helm][Helm]]
- [[#org-mode][ORG MODE]]
- [[#auto-complete][AUTO COMPLETE]]
- [[#dired][DIRED]]
- [[#flycheck][FLYCHECK]]
- [[#plugins][PLUGINS]]
  - [[#general][GENERAL]]
  - [[#avy][AVY]]
  - [[#key-chord][KEY CHORD]]
  - [[#which-key][WHICH-KEY]]
  - [[#sudo-edit][SUDO EDIT]]
  - [[#all-the-icons][ALL THE ICONS]]
- [[#languages][LANGUAGES]]
  - [[#cc][C/C++]]
- [[#treesiter-customization][TREESITER CUSTOMIZATION]]
- [[#doom-modeline][Doom modeline]]
- [[#doom-themes][Doom themes]]
- [[#treemacs][Treemacs]]
- [[#yasnippet][Yasnippet]]
- [[#ace-window][Ace window]]
- [[#eldoc][Eldoc]]
- [[#eldoc-box][Eldoc box]]
- [[#font][FONT]]
- [[#sideline][Sideline]]
- [[#sideline-flymake][Sideline flymake]]
- [[#expand-region][Expand region]]
- [[#poetry][Poetry]]
- [[#consult-eglot][Consult eglot]]
- [[#magit][Magit]]
- [[#doxygen][Doxygen]]
- [[#undo-fu][undo fu]]
- [[#move-text][Move text]]
- [[#save-place][Save place]]
- [[#repeat-mode][Repeat mode]]

* PACKAGES
#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'load-path (expand-file-name "custom_packages" user-emacs-directory))
#+end_src

* BACKUP
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.emacs-backup-files")))
#+end_src

* NO TABS
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+end_src

* EVIL
#+begin_src emacs-lisp
;; (use-package undo-fu
;;   :ensure t)

;;   (use-package evil
;;     :ensure t
;;     :demand t
;;     :bind (("<escape>" . keyboard-escape-quit))
;;     :init
;;     (setq evil-want-C-u-scroll t)
;;     (setq evil-vsplit-window-right t)
;;     (setq evil-split-window-below t)
;;     ;; allows for using cgn
;;     ;; (setq evil-search-module 'evil-search)
;;     (setq evil-want-keybinding nil)
;;     ;; no vim insert bindings
;;     (setq evil-undo-system 'undo-fu)
;;     :config
;;     (evil-mode 1)
;;     (evil-global-set-key 'normal "ga" 'avy-goto-char)
;;     (evil-global-set-key 'normal "gr" 'xref-find-references)
;;     (evil-global-set-key 'normal "gi" 'eglot-code-action-organize-imports)
;;     (evil-global-set-key 'normal "g]" 'flymake-goto-next-error)
;;     (evil-global-set-key 'normal "g[" 'flymake-goto-prev-error)
;;     (evil-global-set-key 'normal "gf" 'eglot-rename)
;; )

;;   ;;; Vim Bindings Everywhere else
;;   (use-package evil-collection
;;     :ensure t
;;     :after evil
;;     :config
;;     (setq evil-want-integration t)
;;     (setq evil-collection-mode-list '(dashboard dired ibuffer))
;;     (evil-collection-init))

;;   (use-package evil-escape
;;     :ensure t
;;     :config
;;     (evil-escape-mode 1)
;;     (setq-default evil-escape-key-sequence "fd")
;;   )

;; (with-eval-after-load 'evil-maps
;;   (define-key evil-motion-state-map (kbd "SPC") nil)
;;   (define-key evil-motion-state-map (kbd "RET") nil)
;;   (define-key evil-motion-state-map (kbd "TAB") nil))
;; ;; Setting RETURN key in org-mode to follow links
;;   (setq org-return-follows-link  t)
#+end_src


* DIMINISH
#+begin_src emacs-lisp
(use-package diminish
:ensure t
:config
(diminish 'which-key-mode)
(diminish 'counsel-mode)
(diminish 'org-indent-mode)
(diminish 'evil-escape-mode)
)
#+end_src

* TREESIT
#+begin_src emacs-lisp
(use-package treesit-auto
:ensure t
:config
(global-treesit-auto-mode))
#+end_src

* GUI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* THEME
#+begin_src emacs-lisp
;(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
;(load-theme 'magonyx t)
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
   :ensure t 
   :init
   (setq initial-buffer-choice 'dashboard-open)
   (setq dashboard-set-heading-icons t)
   (setq dashboard-set-file-icons t)
   (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
   ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
   ;; (setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
   (setq dashboard-center-content nil) ;; set to 't' for centered content
   (setq dashboard-items '((recents . 5)
                           (agenda . 5 )
                           (bookmarks . 3)
                           (projects . 3)
                           (registers . 3)))
   :custom
   (dashboard-modify-heading-icons '((recents . "file-text")
                                     (bookmarks . "book")))
   :config
   (dashboard-setup-startup-hook))
#+end_src

* Smooth scrolling
#+begin_src emacs-lisp
(setq scroll-preserve-screen-position 1)
(setq scroll-conservatively 100)
#+end_src

* Zooming
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* RELOAD EMACS
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* PROJECTILE
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1))
#+end_src

* SHELLS AND TERMINALS

** Vterm
#+begin_src emacs-lisp
  (use-package vterm
   :ensure t
   :config
   (setq shell-file-name "/usr/bin/zsh"
      vterm-max-scrollback 50000))
#+end_src

** Vterm-Toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
  :ensure t
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))




                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

** Multi vterm
#+begin_src emacs-lisp
(use-package multi-vterm
  :ensure t
  )
#+end_src

* BUFFER MOVE
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* Helm
#+begin_src emacs-lisp
(use-package helm
:ensure t
:config
(helm-mode t)
)

(use-package async
:ensure t
)

(use-package popup
:ensure t
)
#+end_src

* ORG MODE
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
#+end_src

#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

* AUTO COMPLETE
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :defer 2
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 1)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :ensure t
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :ensure t
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
#+end_src

* FLYCHECK
#+begin_src emacs-lisp
;; (use-package flycheck
;;   :ensure t
;;   :defer t
;;   :init (global-flycheck-mode))
#+end_src

* PLUGINS
** GENERAL
#+begin_src emacs-lisp
(use-package general
  :config
  ;;           (general-evil-setup)
  (general-create-definer cfg/leader-keys
    :prefix "C-c"
    )

  (general-define-key
   "C-," 'avy-goto-char
   "M-h" 'eldoc-box-help-at-point
   "M-x" 'helm-M-x
   "C-]" 'flymake-goto-next-error
   "C-}" 'flymake-goto-prev-error
   )
  
  (cfg/leader-keys
    "g" '(:ignore t :wk "Git")
    "g l" '(magit-log-current :wk "Log")
    "g t" '(magit :wk "Magit toggle")
    )

  (cfg/leader-keys
    "i" '(helm-imenu :wk "Helm Imenu")
    )

  (cfg/leader-keys
    "." '(helm-find-files :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(helm-recentf :wk "Find recent files")
    )

  (cfg/leader-keys
    "b" '(:ignore t :wk "buffer")
    "b f" '(helm-buffers-list :wk "Buffer list")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    )

  (cfg/leader-keys
    "e" '(:ignore t :wk "Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")) 

  (cfg/leader-keys
    "h" '(:ignore t :wk "Help")
    "h r" '(reload-init-file :wk "Reload emacs config"))

  (cfg/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm")
    "t f" '(multi-vterm-next :wk "Next vterminal")
    "t b" '(multi-vterm-prev :wk "Previous vterminal")
    "t n" '(treemacs :wk "Toggle treemacs file viewer")
    )

  (cfg/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))
  )
#+end_src

** AVY
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    )
#+end_src

** KEY CHORD
#+begin_src emacs-lisp
(use-package key-chord
  :ensure t
  :config
  (key-chord-mode 1)
  ;; (key-chord-define evil-normal-state-map "ga" 'avy-goto-char)
  ;; (key-chord-define evil-visual-state-map "fd" 'evil-change-to-previous-state)
  ;; (key-chord-define evil-insert-state-map "fd" 'evil-normal-state)
  ;; (key-chord-define evil-replace-state-map "fd" 'evil-normal-state)
  ;; (key-chord-define-global "xx" 'avy-goto-char)
  ;; (key-chord-define-global "xl" 'avy-goto-line)
  )
#+end_src

** WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → " )
  )
 #+end_src
 
** SUDO EDIT
#+begin_src emacs-lisp
(use-package sudo-edit
  :ensure t
  :config)
    ;; (cfg/leader-keys
    ;;   "fu" '(sudo-edit-find-file :wk "Sudo find file")
    ;;   "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

** ALL THE ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* LANGUAGES
** C/C++
#+begin_src emacs-lisp
(use-package c-ts-mode
  :ensure t
  :hook ((c-ts-mode . eglot-ensure)
	 (c-ts-mode . company-mode))
  :mode (("\\.c\\'" . c-ts-mode)
	 ("\\.h\\'" . c-ts-mode)
	 )
:config
(setq treesit-font-lock-level 4)
(setq c-ts-mode-indent-offset 4)
  )

;; (use-package flycheck-clang-analyzer
;;   :ensure t
;;   :after flycheck
;;   :config (flycheck-clang-analyzer-setup))
#+end_src

* TREESITER CUSTOMIZATION
#+begin_src emacs-lisp
#+end_src

* Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
)
#+end_src

* Doom themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-badger t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'right
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))
#+end_src

* Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :hook
  (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all)
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets")))
#+end_src

* Ace window
#+begin_src emacs-lisp
       (use-package ace-window
         :ensure t
         :config
         (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
         (setq aw-background nil)
         (defvar aw-dispatch-alist
           '((?x aw-delete-window "Delete Window")
             (?m aw-swap-window "Swap Windows")
             (?M aw-move-window "Move Window")
             (?c aw-copy-window "Copy Window")
             (?j aw-switch-buffer-in-window "Select Buffer")
             (?n aw-flip-window)
             (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
             (?c aw-split-window-fair "Split Fair Window")
             (?v aw-split-window-vert "Split Vert Window")
             (?b aw-split-window-horz "Split Horz Window")
             (?o delete-other-windows "Delete Other Windows")
             (?? aw-show-dispatch-help))
           "List of actions for `aw-dispatch-default'.")
        :bind
        ([remap other-window] . ace-window)
  )
#+end_src

* Eldoc
#+begin_src emacs-lisp
(use-package eldoc
:config
(setq eldoc-echo-area-use-multiline-p nil)
)

#+end_src

* Eldoc box
#+begin_src emacs-lisp
(use-package eldoc-box
:ensure t
)
#+end_src

* FONT
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 100
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

* Sideline
#+begin_src emacs-lisp
(use-package sideline
  :ensure t
  :hook (flymake-mode . sideline-mode)
  :init
  (setq sideline-flymake-display-mode 'point) ; 'point to show errors only on point
                                              ; 'line to show errors on the current line
  (setq sideline-backends-right '(sideline-flymake)))
#+end_src

* Sideline flymake
#+begin_src emacs-lisp
(use-package sideline-flymake
:ensure t
)
#+end_src

* Expand region
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-0" . er/expand-region))
#+end_src

* Poetry
#+begin_src emacs-lisp
(use-package poetry
 :ensure t)
#+end_src

* Consult eglot
#+begin_src emacs-lisp
(use-package consult-eglot
:ensure t
)
#+end_src

* Magit
#+begin_src emacs-lisp
(use-package magit
:ensure t
)
#+end_src

* Doxygen
#+begin_src emacs-lisp
(require 'doxymacs)
(add-hook 'c-mode-common-hook 'doxymacs-mode)
(defun my-doxymacs-font-lock-hook ()
  (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
	  (doxymacs-font-lock)))
(add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)
#+end_src

* undo fu
#+begin_src emacs-lisp
(use-package undo-fu
:ensure t)

(use-package undo-fu-session
:ensure t
:config
(undo-fu-session-global-mode)
)
#+end_src

* Move text
#+begin_src emacs-lisp
(use-package move-text
:ensure t
:config
(move-text-default-bindings)
)
#+end_src

* Save place
#+begin_src emacs-lisp
(use-package saveplace
:ensure t
:config
:hook (after-init . save-place-mode)
)
#+end_src

* Repeat mode
#+begin_src emacs-lisp
(use-package repeat
:ensure t
:hook (after-init . repeat-mode)
:config
(repeat-exit-timeout 5)
)
#+end_src

