#+TITLE: Peixoto's GNU Emacs Config
#+AUTHOR: Lucas Peixoto de Almeida Cavalcante (lucaspeixotot)
#+DESCRIPTION: lucaspeixotot's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Package manager
** Straight bootstrap script
This script is intended to download the bootstrap packaged and execute the install script.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
** Common straight setup
Replace use-package to straight.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src
* Emacs basic settings
** Cursor type
#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
#+end_src
** Line number modeline
#+begin_src emacs-lisp
  (line-number-mode 0)
#+end_src
** Tramp
#+begin_src emacs-lisp
  (setq tramp-allow-unsafe-temporary-files t)
#+end_src
** Project
#+begin_src emacs-lisp
  (use-package project
    :straight t
    :config
    (with-eval-after-load 'project
      (setq project-switch-commands
            (cl-remove-if
             (lambda (cmd)
               (memq (car cmd) '(project-vc-dir project-eshell)))
             project-switch-commands)))
    (with-eval-after-load 'project
      (define-key project-prefix-map "D" #'project-dired)
      (add-to-list 'project-switch-commands '(project-dired "Dired") t))
    )
#+end_src
** Reload Emacs
Helper function to reload emacs easily.
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src
** Smooth scrolling
Create a better experience scrolling on emacs
#+begin_src emacs-lisp
  (setq scroll-margin 3)
  (setq scroll-preserve-screen-position 3)
  (setq scroll-conservatively most-positive-fixnum)
  (setq scroll-step 1)
  (add-hook 'xref-after-return-hook 'recenter)
#+end_src
** GUI
A few UI Tweaks
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (global-visual-line-mode t)
#+end_src
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-string-face nil :slant 'italic)
  (set-face-attribute 'bold nil :family "Hack Nerd Font Mono" :weight 'bold)
  (set-frame-font "Hack Nerd Font Mono-10" nil t)
  (setq-default line-spacing 0)
#+end_src
** Backup
#+begin_src emacs-lisp
      (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
      (setq backup-directory-alist
          `((".*" . ,emacs-tmp-dir)))
      (setq auto-save-file-name-transforms
          `((".*" ,emacs-tmp-dir t)))
      (setq auto-save-list-file-prefix
          emacs-tmp-dir)
#+end_src
** No tabs
Use spaces as tabs and set the number of it.
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (add-hook 'bash-ts-mode-hook (lambda ()
                                 (setq
                                  indent-tabs-mode t
                                  tab-width 8)))
#+end_src
** Zooming
Useul keybindgs to scale the text easily
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** Buffer move
Setup helper functions to move a buffer from one window to another one.
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win)
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src
** Trailing spaces
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace nil)
  (add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
#+end_src
** Ediff
#+begin_src emacs-lisp
  (use-package ediff
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-plain) ; Use a single frame for ediff
    (ediff-split-window-function 'split-window-horizontally) ; Split windows side by side
    (ediff-merge-split-window-function 'split-window-horizontally)) ; Same for merge windows
#+end_src
** Smerge
#+begin_src emacs-lisp
  (use-package smerge-mode
    :straight t
    :init
    (setq smerge-command-prefix "\C-cm")
    :hook
    (prog-mode . smerge-mode)
    :config
    (defhydra hydra-smerge (:color red :hint nil)
      "
  Navigate       Keep               other
  ----------------------------------------
  _p_: previous  _c_: current       _e_: ediff
  _n_: next      _m_: mine  <<      _u_: undo
  _k_: up        _o_: other >>      _r_: refine
  _j_: down      _a_: combine       _-_: smerge mode
                 _b_: base          _q_: quit
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("c" smerge-keep-current)
      ("m" smerge-keep-mine)
      ("o" smerge-keep-other)
      ("b" smerge-keep-base)
      ("a" smerge-keep-all)
      ("e" smerge-ediff)
      ("k" previous-line)
      ("j" forward-line)
      ("r" smerge-refine)
      ("u" undo)
      ("-" smerge-mode)
      ("q" nil :exit t))

    (defun enable-smerge-maybe ()
      (when (and buffer-file-name (vc-backend buffer-file-name))
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "^<<<<<<< " nil t)
            (smerge-mode +1)
            (scimax-smerge/body)))))
    )
#+end_src
** Browser kill ring
#+begin_src emacs-lisp
  (use-package browse-kill-ring
  :straight t
  :defer t)
#+end_src
** Search utilities
#+begin_src emacs-lisp
  (use-package ripgrep
    :defer t)

  (use-package rg
    :defer t)

  (use-package ag
    :defer t)

  (use-package wgrep
    :defer t)
#+end_src
** Electric pair
#+begin_src emacs-lisp
  (electric-pair-mode)
#+end_src
** Isearch
#+begin_src emacs-lisp
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)
  (setq search-whitespace-regexp ".*?")
#+end_src
** Authinfo
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo"))
#+end_src
* Better movement
** Expand region
#+begin_src emacs-lisp
(use-package expand-region
  :straight t
  :bind ("C-0" . er/expand-region))
#+end_src
** Move text
#+begin_src emacs-lisp
    (use-package move-text
    :straight t
    :config
    (defun indent-region-advice (&rest ignored)
           (let ((deactivate deactivate-mark))
             (if (region-active-p)
                 (indent-region (region-beginning) (region-end))
               (indent-region (line-beginning-position) (line-end-position)))
             (setq deactivate-mark deactivate)))

    (advice-add 'move-text-up :after 'indent-region-advice)
    (advice-add 'move-text-down :after 'indent-region-advice)
    (move-text-default-bindings)
    )
#+end_src
** Repeat mode
#+begin_src emacs-lisp
  (use-package repeat
  :straight t
  :hook (after-init . repeat-mode)
  :config
  )
#+end_src
** Avy
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :bind
    (("M-l" . avy-goto-line)
     ("M-c" . avy-goto-char))
    :config
    ;; Additional mode-specific bindings
    (define-key org-mode-map (kbd "M-c") #'avy-goto-char)
    (define-key text-mode-map (kbd "M-c") #'avy-goto-char)
    (define-key prog-mode-map (kbd "M-RET") #'avy-goto-char))
#+end_src
** Ace window
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background t)
    (defvar aw-dispatch-alist
      '((?x aw-delete-window "Delete Window")
        (?m aw-swap-window "Swap Windows")
        (?M aw-move-window "Move Window")
        (?c aw-copy-window "Copy Window")
        (?j aw-switch-buffer-in-window "Select Buffer")
        (?n aw-flip-window)
        (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
        (?c aw-split-window-fair "Split Fair Window")
        (?v aw-split-window-vert "Split Vert Window")
        (?b aw-split-window-horz "Split Horz Window")
        (?o delete-other-windows "Delete Other Windows")
        (?? aw-show-dispatch-help))
      "List of actions for `aw-dispatch-default'.")
    (setq aw-dispatch-always nil)
    (setq aw-ignore-on t)
    (setq aw-ignore-current t)
    :config
    ;;(add-to-list 'aw-ignored-buffers "*Outline*")
    :bind
    ([remap other-window] . ace-window)
    )
#+end_src
** Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :straight t
    :bind
    :init
    (defhydra hydra-vi (:pre (set-cursor-color "#40e0d0")
                             :post (progn
                                     (set-cursor-color "#ffffff")
                                     (message
                                      "Thank you, come again.")))
      "emacs fast movements"
      ("l" forward-char)
      ("h" backward-char)
      ("j" next-line)
      ("k" previous-line)
      ("a" beginning-of-line)
      ("e" end-of-line)
      ("w" forward-word)
      ("b" backward-word)
      ("u" scroll-down-command)
      ("d" scroll-up-command)
      ("z" recenter-top-bottom)
      ("c" treesit-fold-close)
      ("C" treesit-fold-close-all)
      ("o" treesit-fold-open)
      ("O" treesit-fold-open-all)
      ("r" treesit-fold-open-recursively)
      ("RET" avy-goto-char)
      ("." xref-find-definitions)
      ("," xref-go-back)
      ("?" xref-find-references)
      ("q" nil "quit"))

    (defhydra hydra-files
      (:color amaranth)
      "Jump to file system file"
      ("z" (find-file "~/.zshrc") "zshrc")
      ("c" (find-file "~/.emacs.d/config.org") "config.org")
      ("i" (find-file "~/.config/i3/config") "i3 config")
      ("n" (find-file "~/.config/nvim") "nvim config")
      ("C" (reload-init-file) "reload init file")
      ("q" nil "quit")
      )

    (defhydra hydra-diagnostics
      (:color amaranth)
      "Diagnostics"
      ("n" flycheck-next-error "next")
      ("p" flycheck-previous-error "prev")
      ("q" nil "quit")
      )

    (defhydra hydra-window (:color red)
  "
   Split: _v_ert _x_:horz
  Delete: _o_nly  _da_ce  _dw_indow  _db_uffer
    Goto: _h_:left _j_:down _k_:up _l_:right a_ce
    Move: _s_wap _H_:left _J_:down _K_:up _L_:right
    Misc: "
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("H" buf-move-left)
      ("J" buf-move-down)
      ("K" buf-move-up)
      ("L" buf-move-right)
      ("|" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)))
      ("_" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)))
      ("v" split-window-right)
      ("x" split-window-below)
      ("o" delete-other-windows :exit t)
      ("a" ace-window :exit t)
      ("s" ace-swap-window)
      ("da" ace-delete-window)
      ("dw" delete-window)
      ("db" kill-this-buffer)
      ("q" nil)
      )
  )
#+end_src
** God mode
#+begin_src emacs-lisp
  (use-package god-mode
    :straight t
    :init
    (global-set-key (kbd "<escape>") #'god-mode-all)
    :config
    (define-key god-local-mode-map (kbd "i") #'god-local-mode)
    (define-key god-local-mode-map (kbd ".") #'repeat)
    (define-key god-local-mode-map (kbd "[") #'backward-paragraph)
    (define-key god-local-mode-map (kbd "]") #'forward-paragraph)
    (custom-set-faces
     '(god-mode-lighter ((t (:inherit error)))))
    (defun my-god-mode-update-cursor-type ()
      (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

    (add-hook 'god-mode-enabled-hook #'my-god-mode-update-cursor-type)
    (add-hook 'god-mode-disabled-hook #'my-god-mode-update-cursor-type)
    )
#+end_src
** Move where I mean (mwim)
#+begin_src emacs-lisp
  (use-package mwim
    :straight t
    :bind (("C-a" . mwim-beginning-of-code-or-line)
           ("C-e" . mwim-end-of-code-or-line))
    )
#+end_src
** Key chords
#+begin_src emacs-lisp
  (use-package key-chord
    :straight t
    :init
    (key-chord-mode 1)
    :config
    (key-chord-define prog-mode-map "jf" #'format-all-region-or-buffer)
    (key-chord-define-global "jq" #'god-mode-all)
    (key-chord-define-global "jc" #'avy-goto-char)
    )
#+end_src
* Completion system
** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ;; ("C-c M-x" . consult-mode-command)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both  and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;;(setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
  #+end_src
** Vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src
** Orderless
#+begin_src emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
* IDE features
** Breadcrumb
#+begin_src elisp
  (use-package breadcrumb
    :straight t
    :init
    (breadcrumb-mode t)
    )
#+end_src
** Flymake
#+begin_src emacs-lisp
  (use-package flymake
    :straight t
    :config
    (define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
    (define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error)
    (setq-default flymake-indicator-type 'fringes)
    (setq-default flymake-fringe-indicator-position 'right-fringe)
    )
#+end_src
** Format all
#+begin_src emacs-lisp
  (use-package format-all
    :straight t
    )
#+end_src
** Dap
#+begin_src elisp
  (use-package dape
    :preface
    ;; By default dape shares the same keybinding prefix as `gud'
    ;; If you do not want to use any prefix, set it to nil.
    ;; (setq dape-key-prefix "\C-x\C-a")

    ;; :hook
    ;; Save breakpoints on quit
    ;; (kill-emacs . dape-breakpoint-save)
    ;; Load breakpoints on startup
    ;; (after-init . dape-breakpoint-load)

    :config
    ;; Turn on global bindings for setting breakpoints with mouse
    ;; (dape-breakpoint-global-mode)

    ;; Info buffers to the right
    (setq dape-buffer-window-arrangement 'right)

    ;; Info buffers like gud (gdb-mi)
    (setq dape-buffer-window-arrangement 'gud)
    (setq dape-info-hide-mode-line nil)

    ;; Pulse source line (performance hit)
    ;; (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)

    ;; Showing inlay hints
    ;; (setq dape-inlay-hints t)

    ;; Save buffers on startup, useful for interpreted languages
    (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))

    ;; Kill compile buffer on build success
    (add-hook 'dape-compile-hook 'kill-buffer)

    ;; Projectile users
    ;; (setq dape-cwd-function 'projectile-project-root)
    )
#+end_src
** Eldoc box
#+begin_src elisp
  (use-package eldoc-box
    :straight t
    :config
    ;; (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t)
    (global-set-key (kbd "M--") 'eldoc-box-help-at-point)
    )
#+end_src
** Auto Complete
#+begin_src emacs-lisp
   (use-package corfu
     :straight t
     ;; Optional customizations
     :custom
     (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
     ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
     ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
     ;; (corfu-preview-current nil)    ;; Disable current candidate preview
     ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
     ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

     ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
     ;; :hook ((prog-mode . corfu-mode)
     ;;        (shell-mode . corfu-mode)
     ;;        (eshell-mode . corfu-mode))
     (corfu-auto t)
     (corfu-quit-no-match 'separator)
     (corfu-auto-prefix 3)
     (corfu-auto-delay 0.0)
     (corfu-echo-documentation 0.25)
     (corfu-preview-current 'insert)

     :init

     ;; Recommended: Enable Corfu globally.  Recommended since many modes provide
     ;; Capfs and Dabbrev can be used globally (M-/).  See also the customization
     ;; variable `global-corfu-modes' to exclude certain modes.
     (global-corfu-mode)

     ;; Enable optional extension modes:
     ;; (corfu-history-mode)
     ;; (corfu-popupinfo-mode)
     :config
     ;; Enable auto completion and configure quitting
     ;; (setq corfu-auto t
     ;;       corfu-quit-no-match 'separator) ;; or t
     )

   ;; A few more useful configurations...
   (use-package emacs
     :custom
     ;; TAB cycle if there are only few candidates
     ;; (completion-cycle-threshold 3)

     ;; Enable indentation+completion using the TAB key.
     ;; `completion-at-point' is often bound to M-TAB.
     (tab-always-indent 'complete)

     ;; Emacs 30 and newer: Disable Ispell completion function.
     ;; Try `cape-dict' as an alternative.
     (text-mode-ispell-word-completion nil)

     ;; Hide commands in M-x which do not apply to the current mode.  Corfu
     ;; commands are hidden, since they are not used via M-x. This setting is
     ;; useful beyond Corfu.
     (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src
** Symbols outline
#+begin_src emacs-lisp
  (use-package symbols-outline
    :straight t
    :config
    (global-set-key (kbd "M-g s") 'symbols-outline-show)
    (with-eval-after-load 'symbols-outline
      (setq symbols-outline-fetch-fn #'symbols-outline-lsp-fetch)
      (setq symbols-outline-window-position 'left)
      (setq symbols-outline-use-nerd-icon-in-gui t)
      (symbols-outline-follow-mode))
    )
#+end_src
* Misc
** undo fu
#+begin_src emacs-lisp
(use-package undo-fu
:straight t
:config
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-z")   'undo-fu-only-undo)
(global-set-key (kbd "C-S-z") 'undo-fu-only-redo)
)

(use-package undo-fu-session
:straight t
:config
(undo-fu-session-global-mode)
)

(use-package vundo
:straight t
)
#+end_src
** Zap to char
#+begin_src emacs-lisp
(use-package avy-zap
:straight t
:config
(global-set-key (kbd "M-z") 'avy-zap-to-char-dwim)
(global-set-key (kbd "M-Z") 'avy-zap-up-to-char-dwim)
)
#+end_src
** Save place
#+begin_src emacs-lisp
  (use-package saveplace
  :straight t
  :config
  :hook (after-init . save-place-mode)
  )
#+end_src
** Sudo edit
#+begin_src emacs-lisp
(use-package sudo-edit
  :straight t
  :config)
#+end_src
** Surround
#+begin_src emacs-lisp
(use-package surround
  :straight t
  :bind-keymap ("M-'" . surround-keymap))
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :straight t

    :config
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  )
#+end_src
** Symbol overlay
#+begin_src emacs-lisp
  (use-package symbol-overlay
    :straight t
    :defer t
    :hook (prog-mode . symbol-overlay-mode)
    :bind (
                ("C-;" . symbol-overlay-put)
                ("M-N" . symbol-overlay-jump-next)
                ("M-P" . symbol-overlay-jump-previous)))

  (use-package symbol-overlay-mc
    :ensure t
    :bind (("M-a" . symbol-overlay-mc-mark-all)))
#+end_src
** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-manually-select
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-files-by-mouse-dragging    t
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'right
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      -1
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      (treemacs-resize-icons 15)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    )

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :straight t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)
#+end_src
** Embark
#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :straight t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Popper
#+begin_src emacs-lisp
  (use-package popper
    :straight t
    :bind (("C-'"   . popper-toggle)
           ("M-'"   . popper-cycle)
           ("C-M-'" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode))
    (setq popper-reference-buffers
          (append popper-reference-buffers
                  '("^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
                    "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
                    "^\\*term.*\\*$"   term-mode   ;term as a popup
                    "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
                    )))

    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src
** Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :straight t)
#+end_src
** Minions
#+begin_src elisp
  (use-package minions
    :straight t
    :config
    (setq minions-prominent-modes '(flymake-mode god-local-mode))
    (minions-mode 1))
#+end_src
** Terminal (vterm)
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :config
    (defun project-vterm ()
      "Switch to or create a `vterm` buffer in the current project's root."
      (interactive)
      (let* ((proj (or (project-current)          ; find current project
                       (user-error "No project found")))
             (root (project-root proj))
             ;; strip trailing slash and take only last directory component
             (proj-name (file-name-nondirectory
                         (directory-file-name root)))
             (buf-name (format "*vterm-%s*" proj-name))
             (buf (get-buffer buf-name)))
        (if (buffer-live-p buf)
            ;; if it already exists, just switch to it
            (switch-to-buffer buf)
          ;; else create it under the project root
          (let ((default-directory root))
            (vterm buf-name)))))
    (with-eval-after-load 'project
      (define-key project-prefix-map "v" #'project-vterm)
      (add-to-list 'project-switch-commands '(project-vterm "vterm") t))
    )
#+end_src
** Perspective
#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
    :config
    (setq switch-to-prev-buffer-skip
          (lambda (win buff bury-or-kill)
            (not (persp-is-current-buffer buff))))
    (consult-customize consult--source-buffer :hidden t :default nil)
    (add-to-list 'consult-buffer-sources persp-consult-source)
    :init
    (require 'consult)
    (persp-mode))

  (use-package persp-project
    :straight (persp-project :type git :host github :repo "PauloPhagula/persp-project")
    :after (perspective project)
    :config
    (persp-project-mode)
    (global-set-key (kbd "C-x p p") 'persp-project-switch-project)
    )
#+end_src
* AI
** Elysium
#+begin_src emacs-lisp
  (use-package elysium
  :custom
  ;; Below are the default values
  (elysium-window-size 0.33) ; The elysium buffer will be 1/3 your screen
  (elysium-window-style 'vertical)) ; Can be customized to horizontal
#+end_src
** gptel
#+begin_src emacs-lisp
  (use-package gptel
    :straight t
    :config
    (gptel-make-gh-copilot "HPECopilot")
    (setq gptel-model 'claude-3-7-sonnet-20250219)
    (setq gptel-backend (gptel-make-anthropic "Claude"
                          :stream t
                          :key (getenv "ANTHROPIC_API_KEY")
                          ))
    (setq gptel-default-mode 'org-mode)
    )
#+end_src
* Git
** Diff hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :straight t
    :config
    (global-diff-hl-mode)
    )
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :config
    (setq magit-ediff-dwim-show-on-hunks t)
    (with-eval-after-load 'project
      (define-key project-prefix-map "m" #'magit-project-status)
      (add-to-list 'project-switch-commands '(magit-project-status "Magit") t))
    )
#+end_src
** Blamer
#+begin_src emacs-lisp
  (use-package blamer
    :after magit
    :bind (("C-c g i" . blamer-show-commit-info)
           ("C-c g b" . blamer-show-posframe-commit-info))
    :defer 20
    :custom
    (blamer-idle-time                 0.3)
    (blamer-min-offset                4)
    (blamer-max-commit-message-length 100)
    (blamer-datetime-formatter        "[%s]")
    (blamer-commit-formatter          " ● %s")
    )
#+end_src
** Forge
#+begin_src emacs-lisp
  (use-package sqlite3
    :straight t)
  (use-package forge
    :straight t
    :after magit)
#+end_src
** Code review
#+begin_src emacs-lisp
  ;; (use-package code-review
  ;;   :straight (code-review :type git :host github :repo "doomelpa/code-review")
  ;;   :config
  ;;   (setq code-review-fill-column 80)
  ;;   (setq code-review-auth-login-marker 'forge)
  ;;   )
#+end_src
* UI
** Nerd fonts
#+begin_src emacs-lisp
  (use-package nerd-icons
    :straight t
    :custom
    (nerd-icons-font-family "Symbols Nerd Font Mono")
    )
#+end_src
** Dashboard
Setup my dashboard window
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-center-content t) ;; set to 't' for centered content
    (setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
    (setq dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (setq dashboard-projects-backend 'project-el)
    (setq dashboard-projects-switch-function 'persp-project-switch-project)
    (setq dashboard-items '((recents . 10)
                            (agenda . 5 )
                            (projects . 5)))
    (setq dashboard-footer-messages
          '("Keep smiling, keep coding!"
            "Every day is a new opportunity."
            "Stay positive and productive."
            "Code with joy!"
            "Believe in the power of your code."
            "Happy coding!"
            "Make today amazing."
            "Your code can change the world."
            "Stay curious, stay creative."
            "Embrace the journey of learning."))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src
** Theme
*** Modus Themes
#+Begin_src emacs-lisp
   (use-package modus-themes
    :straight t
    :config
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs t)

    ;; Maybe define some palette overrides, such as by using our presets
    (setq modus-themes-common-palette-overrides
          modus-themes-preset-overrides-intense)

    ;; Load the theme of your choice.
    (load-theme 'modus-vivendi :no-confirm)

    (define-key global-map (kbd "<f5>") #'modus-themes-toggle))
#+end_src
*** Ef themes
#+begin_src emacs-lisp
  (use-package ef-themes
    :straight t
    )
#+end_src
** Tree sitter
Enable tree sitter globally on emacs
#+begin_src emacs-lisp
  (use-package treesit-auto
    :straight t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode)
    (setq major-mode-remap-alist
          '((json-mode . json-ts-mode)))
    )

  (use-package treesit-fold
    :straight (treesit-fold :type git :host github :repo "emacs-tree-sitter/treesit-fold")
    :init
    (global-treesit-fold-mode t)
    :config
    (setq treesit-fold-line-count-show t)
    (setq treesit-fold-line-count-format " <%d lines> ")
    )

  (setq treesit-language-source-alist
        '((java "https://github.com/tree-sitter/tree-sitter-java")))
#+end_src
* Languages
** Json
#+begin_src emacs-lisp
  (use-package json-mode
    :straight t)
#+end_src
** Python
#+begin_src elisp
  (use-package poetry
    :straight t)

  (use-package pyvenv
    :straight t)
#+end_src
** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode
    ;; if using straight
    :straight t

    ;; if using package.el
    ;; :ensure t
    :custom (terraform-indent-level 4)
    :config
    (defun my-terraform-mode-init ()
      ;; if you want to use outline-minor-mode
      ;; (outline-minor-mode 1)
      )

    (add-hook 'terraform-mode-hook 'my-terraform-mode-init))
#+end_src
** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
    )
#+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :straight t
    :config
    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
    )
#+end_src
** Dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :straight t)
#+end_src
* Org
#+begin_src emacs-lisp
  (use-package org
    :straight nil
    :config
    (setq org-M-RET-may-split-line '((default . nil)))
    (setq org-insert-heading-respect-content t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files '("~/org-files"))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "INPROGRESS(i@/!)" "BLOCKED(b@/!)" "REVIEW(r@/!)" "|" "CANCEL(c!)" "DONE(d!)")))
    )
#+end_src
* Keybindings
** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
  	    which-key-sort-order #'which-key-key-order-alpha
  	    which-key-sort-uppercase-first nil
  	    which-key-add-column-padding 1
  	    which-key-max-display-columns nil
  	    which-key-min-display-lines 6
  	    which-key-side-window-slot -10
  	    which-key-side-window-max-height 0.25
  	    which-key-idle-delay 0.8
  	    which-key-max-description-length 25
  	    which-key-allow-imprecise-window-fit nil
  	    which-key-separator " → " )
    (which-key-add-key-based-replacements "C-x p p" "Persp project switch")
    )
 #+end_src
** Bindings
#+begin_src emacs-lisp
  ;; Global keybindings for hydras
  (global-set-key (kbd "M-1") 'hydra-vi/body)
  (global-set-key (kbd "M-o") 'hydra-window/body)

  ;; Define prefix keymaps
  (define-prefix-command 'my-hydra-map)
  (define-prefix-command 'my-toggle-map)
  (define-prefix-command 'my-ai-map)
  (define-prefix-command 'my-fold-map)
  (define-prefix-command 'my-treemacs-map)

  (global-set-key (kbd "C-c h") my-hydra-map)
  (which-key-add-key-based-replacements "C-c h" "Hydra")
  (global-set-key (kbd "C-c m") my-toggle-map)
  (which-key-add-key-based-replacements "C-c t" "Toggle")
  (global-set-key (kbd "C-c a") my-ai-map)
  (which-key-add-key-based-replacements "C-c a" "AI")
  (global-set-key (kbd "C-c f") my-fold-map)
  (which-key-add-key-based-replacements "C-c f" "Fold")
  (global-set-key (kbd "C-c t") my-treemacs-map)
  (which-key-add-key-based-replacements "C-c t" "Treemacs")

  ;; Hydra-related commands
  (define-key my-hydra-map (kbd "f") 'hydra-files/body)
  (define-key my-hydra-map (kbd "d") 'hydra-diagnostics/body)
  (define-key my-hydra-map (kbd "m") 'hydra-smerge/body)
  (which-key-add-key-based-replacements "C-c h f" "Hydra files")
  (which-key-add-key-based-replacements "C-c h d" "Hydra diagnostics")
  (which-key-add-key-based-replacements "C-c h m" "Hydra Smerge")

  ;; Toggle commands
  (define-key my-toggle-map (kbd "l") 'display-line-numbers-mode)
  (define-key my-toggle-map (kbd "t") 'visual-line-mode)
  (define-key my-toggle-map (kbd "w") 'delete-trailing-whitespace)
  (which-key-add-key-based-replacements "C-c t l" "Toggle line numbers")
  (which-key-add-key-based-replacements "C-c t t" "Toggle truncated lines")
  (which-key-add-key-based-replacements "C-c t w" "Delete trailing whitespace")

  ;; AI-related functions
  (define-key my-ai-map (kbd "s") 'gptel-send)
  (define-key my-ai-map (kbd "m") 'gptel-menu)
  (define-key my-ai-map (kbd "c") 'gptel)
  (define-key my-ai-map (kbd "C") 'gptel-clear-conversation)
  (define-key my-ai-map (kbd "q") 'elysium-query)
  (which-key-add-key-based-replacements "C-c a s" "Send to LLM")
  (which-key-add-key-based-replacements "C-c a m" "LLM menu")
  (which-key-add-key-based-replacements "C-c a c" "Chat with LLM")
  (which-key-add-key-based-replacements "C-c a C" "Clear LLM conversation")
  (which-key-add-key-based-replacements "C-c a q" "Elysium query")

  ;; Fold related commands
  (define-key my-fold-map (kbd "o") 'treesit-fold-open)
  (define-key my-fold-map (kbd "O") 'treesit-fold-open-all)
  (define-key my-fold-map (kbd "r") 'treesit-fold-open-recursively)
  (define-key my-fold-map (kbd "c") 'treesit-fold-close)
  (define-key my-fold-map (kbd "C") 'treesit-fold-close-all)
  (define-key my-fold-map (kbd "t") 'treesit-fold-toggle)
  (which-key-add-key-based-replacements "C-c f o" "Open fold")
  (which-key-add-key-based-replacements "C-c f O" "Open all folds")
  (which-key-add-key-based-replacements "C-c f r" "Open fold recursively")
  (which-key-add-key-based-replacements "C-c f c" "Close fold")
  (which-key-add-key-based-replacements "C-c f C" "Close all folds")
  (which-key-add-key-based-replacements "C-c f t" "Toggle fold")

  ;; Treemacs related commands
  (global-set-key (kbd "M-0") 'treemacs-select-window)
  (define-key my-treemacs-map (kbd "t") 'treemacs)
  (define-key my-treemacs-map (kbd "d") 'treemacs-select-directory)
  (which-key-add-key-based-replacements "C-c t t" "Treemacs")
  (which-key-add-key-based-replacements "C-c t d" "Select directory")
#+end_src
