#+TITLE: Peixoto's GNU Emacs Config
#+AUTHOR: Lucas Peixoto de Almeida Cavalcante (lucaspeixotot)
#+DESCRIPTION: lucaspeixotot's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Package manager
** Straight bootstrap script
This script is intended to download the bootstrap packaged and execute the install script.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
** Common straight setup
Replace use-package to straight.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src
* Emacs basic settings
** Reload Emacs
Helper function to reload emacs easily.
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src
** Smooth scrolling
Create a better experience scrolling on emacs
#+begin_src emacs-lisp
(setq scroll-preserve-screen-position 1)
(setq scroll-conservatively 1000)
#+end_src
** GUI
A few UI Tweaks
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
  (global-visual-line-mode t)
#+end_src
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)
  (set-face-attribute 'default nil
    :font "Hack Nerd Font Mono"
    :height 100
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "Hack Nerd Font Mono"
    :height 110
    :weight 'medium)
#+end_src
** Backup
#+begin_src emacs-lisp
      (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
      (setq backup-directory-alist
          `((".*" . ,emacs-tmp-dir)))
      (setq auto-save-file-name-transforms
          `((".*" ,emacs-tmp-dir t)))
      (setq auto-save-list-file-prefix
          emacs-tmp-dir)
#+end_src
** No tabs
Use spaces as tabs and set the number of it.
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+end_src
** Zooming
Useul keybindgs to scale the text easily
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** Buffer move
Setup helper functions to move a buffer from one window to another one.
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win)
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src
** Trailing spaces
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
#+end_src
** Ediff
#+begin_src emacs-lisp
  (use-package ediff
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-plain) ; Use a single frame for ediff
    (ediff-split-window-function 'split-window-horizontally) ; Split windows side by side
    (ediff-merge-split-window-function 'split-window-horizontally)) ; Same for merge windows
#+end_src
* UI
** ALL THE ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :straight t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** Dashboard
Setup my dashboard window
#+begin_src emacs-lisp
  (use-package dashboard
   :straight t
   :init
   (setq initial-buffer-choice 'dashboard-open)
   (setq dashboard-set-heading-icons t)
   (setq dashboard-set-file-icons t)
   (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
   ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
   ;; (setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
   (setq dashboard-center-content nil) ;; set to 't' for centered content
   (setq dashboard-items '((recents . 5)
                           (agenda . 5 )
                           (bookmarks . 3)
                           (projects . 3)
                           (registers . 3)))
   :custom
   (dashboard-modify-heading-icons '((recents . "file-text")
                                     (bookmarks . "book")))
   :config
   (dashboard-setup-startup-hook))
#+end_src
** Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-buffer-file-name-style 'relative-from-project)
)
#+end_src
** Doom themes
#+begin_src emacs-lisp
(use-package doom-themes
  :straight t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable ncustom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
** Tree sitter
Enable tree sitter globally on emacs
#+begin_src emacs-lisp
  ;; (use-package treesit-auto
  ;;   :straight t
  ;;   :custom
  ;;   (treesit-auto-install 'prompt)
  ;;   :config
  ;;   (treesit-auto-add-to-auto-mode-alist 'all)
  ;;   (global-treesit-auto-mode))

  (use-package tree-sitter
    :straight t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    )

  (use-package tree-sitter-langs
    :straight t)
#+end_src
* Better movement
** Expand region
#+begin_src emacs-lisp
(use-package expand-region
  :straight t
  :bind ("C-0" . er/expand-region))
#+end_src
** Move text
#+begin_src emacs-lisp
    (use-package move-text
    :straight t
    :config
    (defun indent-region-advice (&rest ignored)
           (let ((deactivate deactivate-mark))
             (if (region-active-p)
                 (indent-region (region-beginning) (region-end))
               (indent-region (line-beginning-position) (line-end-position)))
             (setq deactivate-mark deactivate)))

    (advice-add 'move-text-up :after 'indent-region-advice)
    (advice-add 'move-text-down :after 'indent-region-advice)
    (move-text-default-bindings)
    )
#+end_src
** Repeat mode
#+begin_src emacs-lisp
  (use-package repeat
  :straight t
  :hook (after-init . repeat-mode)
  :config
  )
#+end_src
** Avy
#+begin_src emacs-lisp
(use-package avy
  :straight t
  :bind (("M-RET" . avy-goto-char))
  )
#+end_src
** Ace window
#+begin_src emacs-lisp
       (use-package ace-window
         :straight t
         :config
         (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
         (setq aw-background nil)
         (defvar aw-dispatch-alist
           '((?x aw-delete-window "Delete Window")
             (?m aw-swap-window "Swap Windows")
             (?M aw-move-window "Move Window")
             (?c aw-copy-window "Copy Window")
             (?j aw-switch-buffer-in-window "Select Buffer")
             (?n aw-flip-window)
             (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
             (?c aw-split-window-fair "Split Fair Window")
             (?v aw-split-window-vert "Split Vert Window")
             (?b aw-split-window-horz "Split Horz Window")
             (?o delete-other-windows "Delete Other Windows")
             (?? aw-show-dispatch-help))
           "List of actions for `aw-dispatch-default'.")
        :bind
        ([remap other-window] . ace-window)
  )
#+end_src
** Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :straight t
    :bind
    :init
    (defhydra hydra-vi (:pre (set-cursor-color "#40e0d0")
                             :post (progn
                                     (set-cursor-color "#ffffff")
                                     (message
                                      "Thank you, come again.")))
      "vi"
      ("l" forward-char)
      ("h" backward-char)
      ("j" next-line)
      ("k" previous-line)
      ("a" beginning-of-line)
      ("e" end-of-line)
      ("u" scroll-down-command)
      ("d" scroll-up-command)
      ("L" recenter-top-bottom)
      ("RET" avy-goto-char)
      ("q" nil "quit"))

    (defhydra hydra-files
      (:color amaranth)
      "Jump to file system file"
      ("z" (find-file "~/.zshrc") "zshrc")
      ("c" (find-file "~/.emacs.d/config.org") "config.org")
      ("i" (find-file "~/.config/i3/config") "i3 config")
      ("n" (find-file "~/.config/nvim") "nvim config")
      ("C" (reload-init-file) "reload init file")
      ("q" nil "quit")
      )

    (defhydra hydra-diagnostics
      (:color amaranth)
      "Diagnostics"
      ("n" flycheck-next-error "next")
      ("p" flycheck-previous-error "prev")
      ("q" nil "quit")
      )

    (defhydra hydra-window (:color red)
  "
   Split: _v_ert _x_:horz
  Delete: _o_nly  _da_ce  _dw_indow  _db_uffer
    Goto: _h_:left _j_:down _k_:up _l_:right a_ce
    Move: _s_wap _H_:left _J_:down _K_:up _L_:right
    Misc: "
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("H" buf-move-left)
      ("J" buf-move-down)
      ("K" buf-move-up)
      ("L" buf-move-right)
      ("|" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)))
      ("_" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)))
      ("v" split-window-right)
      ("x" split-window-below)
      ("o" delete-other-windows :exit t)
      ("a" ace-window :exit t)
      ("s" ace-swap-window)
      ("da" ace-delete-window)
      ("dw" delete-window)
      ("db" kill-this-buffer)
      ("q" nil)
      )
  )
#+end_src
** God mode
#+begin_src emacs-lisp
  (use-package god-mode
    :straight t
    :init
    (global-set-key (kbd "<escape>") #'god-mode-all)
    :config
    (setq god-exempt-major-modes nil)
    (setq god-exempt-predicates nil)
    (define-key god-local-mode-map (kbd ".") #'repeat)
    (define-key god-local-mode-map (kbd "[") #'backward-paragraph)
    (define-key god-local-mode-map (kbd "]") #'forward-paragraph)
    )
#+end_src
* Completion system
** Consult
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ;; ("C-c M-x" . consult-mode-command)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
  #+end_src
** Vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src
** Orderless
#+begin_src emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
** Swiper
#+begin_src emacs-lisp
(use-package swiper
:config
(global-set-key "\C-s" 'swiper)
)
#+end_src

* IDE features
** Projectile
Basic projectile setup
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode 1))
#+end_src

** Auto Complete
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    :init

    ;; Recommended: Enable Corfu globally.  Recommended since many modes provide
    ;; Capfs and Dabbrev can be used globally (M-/).  See also the customization
    ;; variable `global-corfu-modes' to exclude certain modes.
    (global-corfu-mode)

    ;; Enable optional extension modes:
    ;; (corfu-history-mode)
    ;; (corfu-popupinfo-mode)
    :config
    ;; Enable auto completion and configure quitting
    (setq corfu-auto t
          corfu-quit-no-match 'separator) ;; or t
    )

  ;; A few more useful configurations...
  (use-package emacs
    :custom
    ;; TAB cycle if there are only few candidates
    ;; (completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function.
    ;; Try `cape-dict' as an alternative.
    (text-mode-ispell-word-completion nil)

    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
    ;; commands are hidden, since they are not used via M-x. This setting is
    ;; useful beyond Corfu.
    (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :hook
    ((prog-mode . lsp-deferred) ; Auto-start LSP for supported languages
     (bash-ts-mode . (lambda () (lsp-mode -1))))
    :commands lsp
    :custom
    (lsp-completion-provider :none) ; Use Company instead of Capf
    :init
    (setq lsp-keymap-prefix "C-c l") ; Prefix for LSP commands
    :config
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.git\\'"))
    (setq-default flymake-diagnostic-functions nil)

  (use-package lsp-ui
    :straight t
    :after lsp-mode
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-enable t)
    (lsp-ui-imenu-enable t))
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :hook
    ((prog-mode . flycheck-mode)
    (bash-ts-mode . (lambda ()
                     (flycheck-mode)
                     (setq flycheck-checker 'sh-bash))))
    :custom
    (flycheck-indication-mode 'right-fringe) ; Show indicators in fringe
    (flycheck-check-syntax-automatically '(save mode-enabled))
    :config
    (setq flycheck-display-errors-delay 0.2))
#+end_src
* Misc
** undo fu
#+begin_src emacs-lisp
(use-package undo-fu
:straight t
:config
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-z")   'undo-fu-only-undo)
(global-set-key (kbd "C-S-z") 'undo-fu-only-redo)
)

(use-package undo-fu-session
:straight t
:config
(undo-fu-session-global-mode)
)

(use-package vundo
:straight t
)
#+end_src
** Zap to char
#+begin_src emacs-lisp
(use-package avy-zap
:straight t
:config
(global-set-key (kbd "M-z") 'avy-zap-to-char-dwim)
(global-set-key (kbd "M-Z") 'avy-zap-up-to-char-dwim)
)
#+end_src
** Save place
#+begin_src emacs-lisp
  (use-package saveplace
  :straight t
  :config
  :hook (after-init . save-place-mode)
  )
#+end_src
** Sudo edit
#+begin_src emacs-lisp
(use-package sudo-edit
  :straight t
  :config)
#+end_src
** Surround
#+begin_src emacs-lisp
(use-package surround
  :straight t
  :bind-keymap ("M-'" . surround-keymap))
#+end_src
* Keybindings
** General
#+begin_src emacs-lisp
  (use-package general
    :config
    ;; Set up global keybindings for hydras
    (global-set-key (kbd "M-1") 'hydra-vi/body)
    (global-set-key (kbd "M-o") 'hydra-window/body)

    ;; Create a custom prefix command
    (general-create-definer c-c-leader
      :prefix "C-c")

    ;; Define keybindings for Hydra-related commands
    (c-c-leader
      "h" '(:ignore t :wk "Hydra")
      "h f" '(hydra-files/body :wk "Hydra files")
      "h d" '(hydra-diagnostics/body :wk "Hydra diagnostics"))

    ;; Define keybindings for toggling various modes and functions
    (c-c-leader
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")
      "t w" '(delete-trailing-whitespace :wk "Delete trailing whitespace"))

    ;; Set up Projectile command map
    (c-c-leader
      "p" '(projectile-command-map :wk "Projectile"))

    ;; Define keybindings for AI-related functions
    (c-c-leader
      "a" '(:ignore t :wk "AI")
      "a s" '(gptel-send :wk "Send to LLM")
      "a m" '(gptel-menu :wk "LLM menu")
      "a c" '(gptel :wk "Chat with LLM")
      "a C" '(gptel-clear-conversation :wk "Clear LLM conversation")))
#+end_src
** Which key
#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → " )
  )
 #+end_src
* AI
#+begin_src emacs-lisp
  (use-package gptel
    :straight t
    :config
    (gptel-make-anthropic "Claude"
      :stream t
      :key (getenv "ANTHROPIC_API_KEY")
      )
    )
#+end_src
