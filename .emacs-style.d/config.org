* Base config
** Setting name and email
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Lucas Peixoto")
   (setq user-mail-address "lucaspeixotoac@gmail.com")
   #+END_SRC
** Minimal UI
   #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   (tool-bar-mode   -1)
   (tooltip-mode    -1)
   (menu-bar-mode   -1)
   #+END_SRC
** Fix undo tree bug
   #+BEGIN_SRC emacs-lisp
   (setq undo-tree-enable-undo-in-region nil)
   #+END_SRC
** Yes and no alias
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Open/load config file
   #+BEGIN_SRC emacs-lisp


     (setq EMACS_DIR "~/.emacs-style.d/")
     (setq CONFIG_FILE "config.org")

     (defun find-config ()
       "Edit config.org"
       (interactive)
       (find-file (concat EMACS_DIR CONFIG_FILE)))
     (defun reload-config()
       "Reload config.org"
       (interactive)
       (load-file (concat EMACS_DIR CONFIG_FILE)))

     (global-set-key (kbd "C-c e") 'find-config)
     (global-set-key (kbd "C-c r") 'reload-config)
   #+END_SRC
** Setting font
   #+BEGIN_SRC emacs-lisp
   (set-frame-font "Office Code Pro-10" nil t)
   (setq popup-use-optimized-column-computation nil)
   #+END_SRC
** Lines and columns
   #+BEGIN_SRC emacs-lisp
   (global-linum-mode 1)
   (line-number-mode 1)
   (column-number-mode 1)
   (setq-default fill-column 80)
   #+END_SRC
** Kill current buffer function
   #+BEGIN_SRC emacs-lisp
     (defun kill-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))

     (global-set-key (kbd "C-x k" ) 'kill-current-buffer)
   #+END_SRC
** Datetime in modeline
   #+BEGIN_SRC emacs-lisp
     (setq display-time-day-and-date t)
     (setq display-time-24hr-format t)
     (setq display-time-default-load-average nil) 
     (setq display-time-format "%a %H:%M - %d %b %Y")
     (display-time-mode t)
   #+END_SRC
** Save the last location in open file
   #+BEGIN_SRC emacs-lisp
     (save-place-mode t)
   #+END_SRC
** Auto update git branch
   #+BEGIN_SRC emacs-lisp
  (setq auto-revert-check-vc-info t) 
   #+END_SRC
** Identation
** Parentheses
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** Bash terminal
    #+BEGIN_SRC emacs-lisp
      (defvar my-term-shell "/bin/bash")
      (defadvice ansi-term (before force-bash)
	(interactive (list my-term-shell)))
      (ad-activate 'ansi-term)

      (global-set-key (kbd "C-c t") 'ansi-term)
   #+END_SRC
** Smoth scroll
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC
** Highlight cursor line
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
   #+END_SRC
** Window splitting
   #+BEGIN_SRC emacs-lisp
     (defun split-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1)
       )

     (defun split-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1)
       )

     (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
     (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
   #+END_SRC
** Detect subword
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode 1)
   #+END_SRC
** Kill whole word
   #+BEGIN_SRC emacs-lisp
     (defun kill-whole-word ()
       (interactive)
       (backward-word)
       (kill-word 1)
       )

     (global-set-key (kbd "C-c f k") 'kill-whole-word)
   #+END_SRC
** Copy whole line
   #+BEGIN_SRC emacs-lisp
     (defun copy-whole-line ()
       (interactive)
       (save-excursion
	 (kill-new
	  (buffer-substring
	   (point-at-bol)
	   (point-at-eol))))
       )

     (global-set-key (kbd "C-c f l") 'copy-whole-line)
   #+END_SRC
** Indentation
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq c-basic-offset 4)
   #+END_SRC
** Kill all buffers
   #+BEGIN_SRC emacs-lisp
     (defun kill-all-buffers ()
       (interactive)
       (mapc 'kill-buffer (buffer-list))
       )

     (global-set-key (kbd "C-M-S-k") 'kill-all-buffers)
   #+END_SRC
* Packages config
** Setting use-package and repositories
   #+BEGIN_SRC emacs-lisp
	  (require 'package)
	  (setq package-enable-at-startup nil)
	  (package-initialize)
	  (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
				   ("gnu"   . "http://elpa.gnu.org/packages/")
				   ("melpa" . "https://melpa.org/packages/")
				   ("melpa-stable" . "http://stable.melpa.org/packages/")))
	  ;; (package-refresh-contents)


	  ;; Bootstrap `use-package`
	  (unless (package-installed-p 'use-package)
	    (package-refresh-contents)
	    (package-install 'use-package))
	  (require 'use-package)

   #+END_SRC
** Custom packages
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path (expand-file-name "custom_packages" user-emacs-directory))
   (load "emacs-surround.el")
   (require 'doxymacs)
   #+END_SRC
** All the icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t
       )
   #+END_SRC
** Which keybindind
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (setq which-key-separator " ")
       (setq which-key-prefix-prefix "+")
       :config
       (which-key-mode))
   #+END_SRC
** Hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :ensure t
       :preface
       (defvar-local me/ongoing-hydra-body nil)
       (defun me/ongoing-hydra ()
	 (interactive)
	 (if me/ongoing-hydra-body
	     (funcall me/ongoing-hydra-body)
	   (user-error "me/ongoing-hydra: me/ongoing-hydra-body is not set")))
       :bind
       (("C-c a" . hydra-avy/body)
       ("C-c v" . hydra-vi/body)
       ("C-c b" . hydra-buf/body)
       )
       :custom
       (hydra-default-hint nil))
   #+END_SRC
*** Hydra-vi
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-vi (:post (progn
				  (message
				   "Thank you, come again.")))
	"vi"
	("l" forward-char)
	("h" backward-char)
	("j" next-line)
	("k" previous-line)
	("q" nil "quit"))
    #+END_SRC
** Themes and appearence
*** Modeline
    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
            :ensure t
            :hook (after-init . doom-modeline-mode)
            :config
            (setq doom-modeline-buffer-file-name-style 'relative-to-project)
            (setq doom-modeline-vcs-max-length 20)
            (setq doom-modeline-github-interval (* 1 60))

      )
    #+END_SRC
*** Doom themes
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
             doom-themes-enable-italic t) ; if nil, italics is universally disabled
       (load-theme 'doom-one t)
       )
   #+END_SRC
*** Rainbow
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
	:ensure t
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+END_SRC
*** Anzu
   #+BEGIN_SRC emacs-lisp
     (use-package anzu
       :ensure t
       :config
       (global-anzu-mode +1))
   #+END_SRC
*** Beacon
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :init
       (beacon-mode 1)
       :config
       (setq beacon-blink-duration 0.1)
       (setq beacon-size 20)
       (setq beacon-blink-delay 0.1)
     )
   #+END_SRC
*** Pretty mode
   #+BEGIN_SRC emacs-lisp
     (use-package pretty-mode
       :ensure t
       :config
       (add-hook 'c-mode-hook 'pretty-mode)
       (add-hook 'c++-mode-hook 'pretty-mode)
       )
   #+END_SRC
*** Highlight numbers
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-numbers
	:ensure t
	:config
	(add-hook 'prog-mode-hook 'highlight-numbers-mode))

    #+END_SRC
** Org
*** Org bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :hook ((org-mode) . (lambda () (org-bullets-mode 1)))
        )
    #+END_SRC
*** Org basic config
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook 'auto-fill-mode)
    #+END_SRC
** CMAKE mode
   #+BEGIN_SRC emacs-lisp
     (use-package cmake-font-lock
       :ensure t
       :config
       (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
       (add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
       )
   
   #+END_SRC
** Avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :config
       (avy-setup-default)
       (setq avy-timeout-seconds 0.5)
       (defhydra hydra-avy (:exit t :hint nil)
       "
      Line^^       Region^^        Goto
     ----------------------------------------------------------
      [_y_] yank   [_Y_] yank      [_C_] timed char  [_c_] char
      [_m_] move   [_M_] move      [_w_] word        [_W_] any word
      [_k_] kill   [_K_] kill      [_l_] line        [_L_] end of line"
       ("C" avy-goto-char-timer)
       ("c" avy-goto-char)
       ("w" avy-goto-word-0)
       ("W" avy-goto-word-1)
       ("l" avy-goto-line)
       ("L" avy-goto-end-of-line)
       ("m" avy-move-line)
       ("M" avy-move-region)
       ("k" avy-kill-whole-line)
       ("K" avy-kill-region)
       ("y" avy-copy-line)
       ("Y" avy-copy-region))
       )
   #+END_SRC
** Smartparens
   #+BEGIN_SRC emacs-lisp
     (defun my-fancy-newline ()
       "Add two newlines and put the cursor at the right indentation
     between them if a newline is attempted when the cursor is between
     two curly braces, otherwise do a regular newline and indent"
       (interactive)
       (if (and (equal (char-before) 123) ; {
                (equal (char-after) 125)) ; }
           (progn (newline-and-indent)
                  (split-line)
                  (indent-for-tab-command))
         (newline-and-indent)))

     ;; I set mine to C-j, you do you, don't let me tell you how to live your life.
     (global-set-key (kbd "RET") 'my-fancy-newline)

     ;; smart parens
     (use-package smartparens
       :ensure t
       :config
       (add-hook 'prog-mode-hook #'smartparens-mode)
       )
   #+END_SRC
** IDO
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)

     (defun bind-ido-keys ()
       "Keybindings for ido mode."
       (define-key ido-completion-map (kbd "C-n") 'ido-next-match) 
       (define-key ido-completion-map (kbd "C-p")   'ido-prev-match))

     (add-hook 'ido-setup-hook #'bind-ido-keys)
   #+END_SRC
** Buffers
*** Switch buffer
    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (global-set-key (kbd "C-x b") 'ido-switch-buffer)
    #+END_SRC
** Smex
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :init
       (smex-initialize)
       :config
       (global-set-key (kbd "M-x") 'smex)
       )
   #+END_SRC
** Switch-window
   #+BEGIN_SRC emacs-lisp
     (use-package switch-window
       :ensure t
       :config
       (setq switch-window-input-style 'minibuffer)
       (setq switch-window-increase 4)
       (setq switch-window-threshold 2)
       (setq switch-window-shortcut-style 'qwerty)
       (setq switch-window-qwerty-shortcuts
	     '("a" "s" "d" "f" "h" "j" "k" "l"))
       :bind
       ([remap other-window] . switch-window)
       )
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region)
       )

   #+END_SRC
** Emacs surround
   #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "C-q") 'emacs-surround)
   #+END_SRC
** Doxymacs
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook 'doxymacs-mode) 
     (defun my-doxymacs-font-lock-hook ()
       (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
	   (doxymacs-font-lock)))
     (add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind(
	     ("C-c g" . magit-status)
       )
     )
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     (defun neotree-project-dir ()
       "Open NeoTree using the git root."
       (interactive)
       (let ((project-dir (projectile-project-root))
	     (file-name (buffer-file-name)))
	 (neotree-toggle)
	 (if project-dir
	     (if (neo-global--window-exists-p)
		 (progn
		     (neotree-dir project-dir)
		     (neotree-find file-name)))
	   (message "Could not find git project root."))))

     (use-package neotree
       :ensure t
       :config
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
       (add-hook 'neotree-mode-hook
		 (lambda ()
		   (visual-line-mode -1)
		   (setq truncate-lines t)))
       (global-set-key (kbd "C-c n") 'neotree-project-dir)
       )
   #+END_SRC
** Buffer move
   #+BEGIN_SRC emacs-lisp
     (use-package buffer-move
       :ensure t
       :config
       (defhydra hydra-buf (:exit t :hint nil)
	 "
	 Goto^^                   Move^^        Action^^
	 -----------------------------------------------------
	 [_p_] previous buffer    [_h_] left    [_k_] Kill current buffer
	 [_n_] next buffer        [_j_] down
                                [_k_] up
                                [_l_] right
"
	 ("p" switch-to-prev-buffer)
	 ("n" switch-to-next-buffer)
	 ("h" buf-move-left)
	 ("j" buf-move-down)
	 ("k" buf-move-up)
	 ("l" buf-move-right)
	 ("k" kill-current-buffer)
	 )
       )
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :init
       :config
       (projectile-mode +1)
       (global-set-key (kbd "C-c p") 'projectile-command-map))
   #+END_SRC
** AG search
   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :ensure t
       :config
       (setq ag-highlight-search t) 
       )
   #+END_SRC
** Winum
   #+BEGIN_SRC emacs-lisp
     (use-package winum
       :ensure t
       :config
       (winum-mode)
       :bind(("C-c 1" . winum-select-window-1)
	     ("C-c 2" . winum-select-window-2)
	     ("C-c 3" . winum-select-window-3)
	     ("C-c 4" . winum-select-window-4)
	     ("C-c 5" . winum-select-window-5)
	     ("C-c 6" . winum-select-window-6))
       )
   #+END_SRC
** Undo tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode))
   #+END_SRC
** Ivy/Counsel/Swiper
   #+BEGIN_SRC emacs-lisp
	;; ivy 
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       )

     ;; counsel
     (use-package counsel
       :ensure t
       :bind
       (("M-x" . counsel-M-x))
       )

     ;; swiper
     (use-package swiper
       :ensure t
       :bind
       (("C-s" . swiper))
       )

   #+END_SRC
** Auto complete
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (ac-config-default)
       (global-auto-complete-mode t))
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (yas-global-mode 1))

     (use-package yasnippet-snippets
       :ensure t)
   #+END_SRC
** Clangformat
   #+BEGIN_SRC emacs-lisp
     (defun clang-format-buffer-smart ()
       "Reformat buffer if .clang-format exists in the projectile root."
       (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
         (clang-format-buffer)))

     (defun clang-format-buffer-smart-on-save ()
       "Add auto-save hook for clang-format-buffer-smart."
       (add-hook 'before-save-hook 'clang-format-buffer-smart nil t))

     (use-package clang-format
       :ensure t
       :config
       (add-hook 'c-mode-hook 'clang-format-buffer-smart-on-save)
       (add-hook 'c++-mode-hook 'clang-format-buffer-smart-on-save)
       )
   #+END_SRC
** DTS mode
   #+BEGIN_SRC emacs-lisp
     (use-package dts-mode
       :ensure t)
   #+END_SRC
