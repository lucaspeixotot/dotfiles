* Base config
** Setting name and email
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Lucas Peixoto")
   (setq user-mail-address "lucaspeixotoac@gmail.com")
   #+END_SRC
** Minimal UI
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
     (tool-bar-mode   -1)
     (tooltip-mode    -1)
     (menu-bar-mode   -1)
     (set-fringe-mode 10)        ; Give some breathing room
   #+END_SRC
** Fix undo tree bug
   #+BEGIN_SRC emacs-lisp
   (setq undo-tree-enable-undo-in-region nil)
   #+END_SRC
** Save undo tree for a file
   #+BEGIN_SRC emacs-lisp
     (setq undo-tree-auto-save-history t)
     (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo-tree")))
   #+END_SRC
** Yes and no alias
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Open/load config file
   #+BEGIN_SRC emacs-lisp
     (setq EMACS_DIR "~/.emacs.d/")
     (setq CONFIG_FILE "config.org")
     (setq INIT_FILE "init.el")

     (defun find-config ()
       "Edit config.org"
       (interactive)
       (find-file (concat EMACS_DIR CONFIG_FILE)))
     (defun reload-config()
       "Reload config.org"
       (interactive)
       (load-file (concat EMACS_DIR INIT_FILE)))

     ;; (global-set-key (kbd "C-c cfg") 'find-config)
     ;; (global-set-key (kbd "C-c rcfg") 'reload-config)
   #+END_SRC
** Setting font
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Source Code Pro-8" nil t)
     (setq popup-use-optimized-column-computation nil)
   #+END_SRC
** Lines and columns
   #+BEGIN_SRC emacs-lisp
   (global-linum-mode 1)
   (line-number-mode 1)
   (column-number-mode 1)
   (setq-default fill-column 80)
   #+END_SRC
** Kill current buffer function
   #+BEGIN_SRC emacs-lisp
     (defun kill-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))

     ;; (global-set-key (kbd "C-x k" ) 'kill-current-buffer)
   #+END_SRC
** Save the last location in open file
   #+BEGIN_SRC emacs-lisp
     (save-place-mode t)
   #+END_SRC
** Auto update git branch
   #+BEGIN_SRC emacs-lisp
  (setq auto-revert-check-vc-info t) 
   #+END_SRC
** Parentheses
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** Bash terminal
    #+BEGIN_SRC emacs-lisp
      (defvar my-term-shell "/bin/bash")
      (defadvice ansi-term (before force-bash)
	(interactive (list my-term-shell)))
      (ad-activate 'ansi-term)

      ;; (global-set-key (kbd "C-c t") 'shell)
   #+END_SRC
** Smoth scroll
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC
** Highlight cursor line
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
   #+END_SRC
** Detect subword
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode 1)
   #+END_SRC
** Indentation
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 4)
     (setq c-basic-offset 4)
   #+END_SRC
** Backup files
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil) ; stop creating backup~ files
     (setq auto-save-default nil) ; stop creating #autosave# files
     (setq create-lockfiles nil)
   #+END_SRC
** Cache
  #+BEGIN_SRC emacs-lisp
    (setq user-cache-directory (concat EMACS_DIR "cache"))
    (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
          url-history-file (expand-file-name "url/history" user-cache-directory)
          auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
          projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))
  #+END_SRC
** Setting PATH env
   #+BEGIN_SRC emacs-lisp
     (let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
       (setenv "PATH" path)
       (setq exec-path 
             (append
              (split-string-and-unquote path ":")
              exec-path)))

     (setenv "PATH"
       (concat
        (getenv "PATH")
       )
     )
   #+END_SRC
** Bookmarks
#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file "~/.emacs.d/my-bookmarks")
  (setq bookmark-save-flag 1)
#+END_SRC
** Highlight FIXME, TODO and BUG in prog mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
                 (lambda ()
                  (font-lock-add-keywords nil
                   '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))
#+END_SRC
** Disable line numbers for some nodes
  #+BEGIN_SRC emacs-lisp
    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
  #+END_SRC
* Packages config
** Org
   #+BEGIN_SRC emacs-lisp
   (use-package org)
   #+END_SRC
** Evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :init
       (setq evil-want-C-u-scroll t)
       (setq evil-want-keybinding nil)
       (global-evil-leader-mode))
     (use-package evil
       :init
       (setq evil-want-integration nil) ;; required by evil-collection
       (setq evil-search-module 'isearch)
       (setq evil-ex-complete-emacs-commands nil)
       (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
       (setq evil-split-window-below t) ;; like vim's 'splitbelow'
       (setq evil-shift-round nil)
       (setq evil-want-C-u-scroll t)
       :config
       (evil-mode)
       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal)
       )

     ;; vim-like keybindings everywhere in emacs
     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))

     (use-package evil-commentary)
   #+END_SRC
** Selectrum
   #+BEGIN_SRC emacs-lisp
   (use-package selectrum
   :config
   (selectrum-mode +1))
   #+END_SRC
** Consult 
   #+BEGIN_SRC emacs-lisp
     (use-package consult
       :hook (completion-list-mode . consult-preview-at-point-mode)
       :init
       ;; Optionally configure the register formatting. This improves the register
       ;; preview for `consult-register', `consult-register-load',
       ;; `consult-register-store' and the Emacs built-ins.
       (setq register-preview-delay 0
             register-preview-function #'consult-register-format)

       ;; Optionally tweak the register preview window.
       ;; This adds thin lines, sorting and hides the mode line of the window.
       (advice-add #'register-preview :override #'consult-register-window)

       ;; Optionally replace `completing-read-multiple' with an enhanced version.
       (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

       ;; Use Consult to select xref locations with preview
       (setq xref-show-xrefs-function #'consult-xref
             xref-show-definitions-function #'consult-xref)
       :config
       ;; Optionally configure preview. The default value
       ;; is 'any, such that any key triggers the preview.
       ;; (setq consult-preview-key 'any)
       ;; (setq consult-preview-key (kbd "M-."))
       ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
       ;; For some commands and buffer sources it is useful to configure the
       ;; :preview-key on a per-command basis using the `consult-customize' macro.
       (consult-customize
        consult-theme
        :preview-key '(:debounce 0.2 any)
        consult-ripgrep consult-git-grep consult-grep
        consult-bookmark consult-recent-file consult-xref
        consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
        :preview-key (kbd "M-."))

       ;; Optionally configure the narrowing key.
       ;; Both < and C-+ work reasonably well.
       (setq consult-narrow-key "<") ;; (kbd "C-+")

       ;; Optionally make narrowing help available in the minibuffer.
       ;; You may want to use `embark-prefix-help-command' or which-key instead.
       ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

       ;; Optionally configure a function which returns the project root directory.
       ;; There are multiple reasonable alternatives to chose from.
       ;;;; 1. project.el (project-roots)
       ;;(setq consult-project-root-function
       ;;      (lambda ()
       ;;        (when-let (project (project-current))
       ;;          (car (project-roots project)))))
       ;;;; 2. projectile.el (projectile-project-root)
       (autoload 'projectile-project-root "projectile")
       (setq consult-project-root-function #'projectile-project-root)
       ;;;; 3. vc.el (vc-root-dir)
       ;; (setq consult-project-root-function #'vc-root-dir)
       ;;;; 4. locate-dominating-file
       ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))  
       )

     (use-package consult-projectile
       :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master"))
   #+END_SRC
** Marginalia
   #+BEGIN_SRC emacs-lisp
     (use-package marginalia
       ;; The :init configuration is always executed (Not lazy!)
       :init

       ;; Must be in the :init section of use-package such that the mode gets
       ;; enabled right away. Note that this forces loading the package.
       (marginalia-mode))
   #+END_SRC
** Embark
   #+BEGIN_SRC emacs-lisp
     (use-package embark
       :bind
       ;; (("C-." . embark-act)         ;; pick some comfortable binding
       ;;  ("C-;" . embark-dwim)        ;; good alternative: M-.
       ;;  ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

       :init
       ;; Optionally replace the key help with a completing-read interface
       (setq prefix-help-command #'embark-prefix-help-command)
       :config
       ;; Hide the mode line of the Embark live/completions buffers
       (add-to-list 'display-buffer-alist
                    '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                      nil
                      (window-parameters (mode-line-format . none)))))

     ;; Consult users will also want the embark-consult package.
     (use-package embark-consult
       :after (embark consult)
       :demand t ; only necessary if you have the hook below
       ;; if you want to have consult previews as you move around an
       ;; auto-updating embark collect buffer
       :hook
       (embark-collect-mode . consult-preview-at-point-mode))
   #+END_SRC
** Prescient
  #+BEGIN_SRC emacs-lisp
    (use-package selectrum-prescient
      :config
      (setq selectrum-prescient-enable-filtering nil)
      (selectrum-prescient-mode +1)
      (prescient-persist-mode +1)
      )
  #+END_SRC
** Ordeless
   #+BEGIN_SRC emacs-lisp
     (use-package orderless
       :custom (completion-styles '(orderless))
       :config
       ;; Persist history over Emacs restarts
       (savehist-mode)

       ;; Optional performance optimization
       ;; by highlighting only the visible candidates.
       (setq orderless-skip-highlighting (lambda () selectrum-is-active))
       (setq selectrum-highlight-candidates-function #'orderless-highlight-matches) 
       )
   #+END_SRC
** All the icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
   #+END_SRC
** Which keybindind
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :init
       (setq which-key-separator " ")
       (setq which-key-prefix-prefix "+")
       :config
       (which-key-mode))
   #+END_SRC
** Themes and appearence
*** Modeline
    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
            :hook (after-init . doom-modeline-mode)
            :config
            (setq doom-modeline-buffer-file-name-style 'relative-to-project)
            (setq doom-modeline-vcs-max-length 20)
            (setq doom-modeline-github-interval (* 1 60))
      )
    #+END_SRC
*** Doom themes
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :config
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
             doom-themes-enable-italic t) ; if nil, italics is universally disabled
         (load-theme 'doom-one t)
         ;; (load-theme 'doom-one-light t)
       )
   #+END_SRC
*** Rainbow
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+END_SRC
*** Anzu
   #+BEGIN_SRC emacs-lisp
     (use-package anzu
       :config
       (global-anzu-mode +1))
   #+END_SRC
*** Beacon
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :init
       (beacon-mode 1)
       :config
       (setq beacon-blink-duration 0.1)
       (setq beacon-size 20)
       (setq beacon-blink-delay 0.1)
     )
   #+END_SRC
*** Highlight numbers
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-numbers
	:config
	(add-hook 'prog-mode-hook 'highlight-numbers-mode))
    #+END_SRC
** Avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :init
       (avy-setup-default)
       (setq avy-timeout-seconds 0.5)
       :bind
       )
   #+END_SRC
** Smartparens
   #+BEGIN_SRC emacs-lisp
     (defun my-fancy-newline ()
       "Add two newlines and put the cursor at the right indentation
     between them if a newline is attempted when the cursor is between
     two curly braces, otherwise do a regular newline and indent"
       (interactive)
       (if (and (equal (char-before) 123) ; {
                (equal (char-after) 125)) ; }
           (progn (newline-and-indent)
                  (split-line)
                  (indent-for-tab-command))
         (newline-and-indent)))

     ;; I set mine to C-j, you do you, don't let me tell you how to live your life.
     ;;(global-set-key (kbd "RET") 'my-fancy-newline)

     ;; smart parens
     (use-package smartparens
       :config
       (add-hook 'prog-mode-hook #'smartparens-mode)
       )
   #+END_SRC
** Ace window
   #+BEGIN_SRC emacs-lisp
          (use-package ace-window
            :config
            (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
            (setq aw-background nil)
            (defvar aw-dispatch-alist
              '((?x aw-delete-window "Delete Window")
                (?m aw-swap-window "Swap Windows")
                (?M aw-move-window "Move Window")
                (?c aw-copy-window "Copy Window")
                (?j aw-switch-buffer-in-window "Select Buffer")
                (?n aw-flip-window)
                (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
                (?c aw-split-window-fair "Split Fair Window")
                (?v aw-split-window-vert "Split Vert Window")
                (?b aw-split-window-horz "Split Horz Window")
                (?o delete-other-windows "Delete Other Windows")
                (?? aw-show-dispatch-help))
              "List of actions for `aw-dispatch-default'.")
           :bind
           ([remap other-window] . ace-window)
     )
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config 
       (setq projectile-enable-caching nil)
       (setq projectile-indexing-method 'hybrid)
       (projectile-mode)
     )
   #+END_SRC
** AG search
   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :config
       (setq ag-highlight-search t) 
       )
   #+END_SRC
** Undo tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :after evil
       :diminish
       :init
       (global-undo-tree-mode)
       :config
       (evil-set-undo-system 'undo-tree))
   #+END_SRC
** Clangformat
   #+BEGIN_SRC emacs-lisp
     (defun clang-format-buffer-smart ()
       "Reformat buffer if .clang-format exists in the projectile root."
       (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
         (clang-format-buffer)))

     (defun clang-format-buffer-smart-on-save ()
       "Add auto-save hook for clang-format-buffer-smart."
       (add-hook 'before-save-hook 'clang-format-buffer-smart nil t))

     (use-package clang-format
       :config
       (add-hook 'c-mode-hook 'clang-format-buffer-smart-on-save)
       (add-hook 'c++-mode-hook 'clang-format-buffer-smart-on-save)
       )
   #+END_SRC
** Ansicolor
   #+BEGIN_SRC emacs-lisp
     (use-package ansi-color
       :config
       (defun colorize-compilation-buffer ()
         (let ((inhibit-read-only t))
           (ansi-color-apply-on-region (point-min) (point-max))))
       (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
       )
   #+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome to Peixoto's Emacs!!")
    (setq dashboard-items '((recents  . 10)
                            (projects . 10)
                            (bookmarks . 5)))
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-footer t)
    (setq dashboard-footer-messages '("Emacs is written in Lisp, which is the only computer language that is beautiful."))
    (setq dashboard-footer-icon (all-the-icons-octicon "dashboard"
                                                       :height 1.1
                                                       :v-adjust -0.05
                                                       :face 'font-lock-keyword-face))
    )
#+END_SRC
** General
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :config
       (general-define-key
        :keymaps 'lsp-mode-map
        "<f5>"    'dap-debug
        "M-<f5>"  'dap-hydra
        "M-9"     'lsp-treemacs-errors-list
       )
       ;; Evil
       ;;; Evil leader definition
       (setq my-leader "SPC")
       (setq my-local-leader "SPC m")
       (general-create-definer my-leader-def
                               :prefix my-leader)

       (general-create-definer my-local-leader-def
                               :prefix my-local-leader)

       ;;; Evil normal state keybindings
       (general-def 'normal
         "gl" 'avy-goto-line
         "ga" 'avy-goto-subword-1
         "gc" 'evil-commentary)

       ;;; Evil normal state keybindings with LEADER
       (my-leader-def 'normal 'override
         "0"   'treemacs-select-window
         "1"   'winum-select-window-1
         "2"   'winum-select-window-2
         "3"   'winum-select-window-3
         "4"   'winum-select-window-4
         "5"   'winum-select-window-5
         "6"   'winum-select-window-6
         "7"   'winum-select-window-7
         "8"   'winum-select-window-8
         "9"   'winum-select-window-9
         "p"  'projectile-command-map
         "lo"  'lsp-organize-imports
         "lr"  'lsp-rename
         "xt1" 'treemacs-delete-other-windows
         "xtt" 'treemacs
         "xtd" 'treemacs-select-directory
         "xtf" 'treemacs-find-file
         "xtg" 'treemacs-find-tag
         "xcr" 'reload-config
         "xcf" 'find-config
         "x1"  'delete-other-windows
         "hz"  'hydra-text-scale/body
         "q" 'delete-window
         "w" 'save-buffer
       )
     )
   #+END_SRC 
** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 10)
     "scale text"
     ("j" text-scale-increase "in")
     ("k" text-scale-decrease "out")
     ("f" nil "finished" :exit t))
#+END_SRC

** Forge
  #+BEGIN_SRC emacs-lisp
    (use-package forge)
  #+END_SRC

** Winum
  #+BEGIN_SRC emacs-lisp
    (use-package winum
      :config
      (winum-mode))
  #+END_SRC
** Treemacs
  #+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :defer t
      :init
      :after (lsp-mode)
      :config
      (progn
        (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
              treemacs-deferred-git-apply-delay        0.5
              treemacs-directory-name-transformer      #'identity
              treemacs-display-in-side-window          t
              treemacs-eldoc-display                   'simple
              treemacs-file-event-delay                5000
              treemacs-file-extension-regex            treemacs-last-period-regex-value
              treemacs-file-follow-delay               0.2
              treemacs-file-name-transformer           #'identity
              treemacs-follow-after-init               t
              treemacs-expand-after-init               t
              treemacs-find-workspace-method           'find-for-file-or-pick-first
              treemacs-git-command-pipe                ""
              treemacs-goto-tag-strategy               'refetch-index
              treemacs-indentation                     2
              treemacs-indentation-string              " "
              treemacs-is-never-other-window           nil
              treemacs-max-git-entries                 5000
              treemacs-missing-project-action          'ask
              treemacs-move-forward-on-expand          nil
              treemacs-no-png-images                   nil
              treemacs-no-delete-other-windows         t
              treemacs-project-follow-cleanup          nil
              treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
              treemacs-position                        'left
              treemacs-read-string-input               'from-child-frame
              treemacs-recenter-distance               0.1
              treemacs-recenter-after-file-follow      nil
              treemacs-recenter-after-tag-follow       nil
              treemacs-recenter-after-project-jump     'always
              treemacs-recenter-after-project-expand   'on-distance
              treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
              treemacs-show-cursor                     nil
              treemacs-show-hidden-files               t
              treemacs-silent-filewatch                nil
              treemacs-silent-refresh                  nil
              treemacs-sorting                         'alphabetic-asc
              treemacs-select-when-already-in-treemacs 'move-back
              treemacs-space-between-root-nodes        t
              treemacs-tag-follow-cleanup              t
              treemacs-tag-follow-delay                1.5
              treemacs-text-scale                      nil
              treemacs-user-mode-line-format           nil
              treemacs-user-header-line-format         nil
              treemacs-wide-toggle-width               70
              treemacs-width                           35
              treemacs-width-increment                 1
              treemacs-width-is-initially-locked       t
              treemacs-workspace-switch-cleanup        nil)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;;(treemacs-resize-icons 44)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode 'always)

        (pcase (cons (not (null (executable-find "git")))
                     (not (null treemacs-python-executable)))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple)))

        (treemacs-hide-gitignored-files-mode nil))
     )

    (use-package lsp-treemacs
      :after (lsp-mode treemacs)
      :ensure t
      :commands lsp-treemacs-errors-list
      :bind (:map lsp-mode-map
         ("M-9" . lsp-treemacs-errors-list)))

    (use-package treemacs-evil
      :after (treemacs evil)
      :ensure t)

    (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t)

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once)
      :ensure t)

    (use-package treemacs-magit
      :after (treemacs magit)
      :ensure t)
  #+END_SRC
** Exec path from shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
        :config
        (exec-path-from-shell-initialize)
    )
  #+END_SRC
** Company
  #+BEGIN_SRC emacs-lisp
    (use-package company)
  #+END_SRC
** Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck :init (global-flycheck-mode))
  #+END_SRC
** Dap
  #+BEGIN_SRC emacs-lisp
    (use-package dap-mode
      :ensure t
      :after (lsp-mode)
      :functions dap-hydra/nil
      :config
      :hook ((dap-mode . dap-ui-mode)
        (dap-session-created . (lambda (&_rest) (dap-hydra)))
        (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))
  #+END_SRC
** LSP
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
    :ensure t
    :hook (
       (lsp-mode . lsp-enable-which-key-integration)
       (java-mode . #'lsp-deferred)
    )
    :init (setq 
        lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
        lsp-enable-file-watchers nil
        read-process-output-max (* 1024 1024)  ; 1 mb
        lsp-completion-provider :capf
        lsp-idle-delay 0.500
    )
    :config 
        (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
        (with-eval-after-load 'lsp-intelephense
        (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
    )

    (use-package lsp-java 
    :config
    (add-hook 'java-mode-hook 'lsp)
    (setq lsp-java-vmargs
      (list
         "-XX:+UseParallelGC"
         "-XX:GCTimeRatio=4"
         "-XX:AdaptiveSizePolicyWeight=90"
         "-Dsun.zip.disableMemoryMapping=true"
         "-Xmx1G"
         "-Xms100m"
         "-javaagent:/home/lucas/Downloads/lombok.jar"))
    )
  #+END_SRC

