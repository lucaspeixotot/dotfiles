#+TITLE: Peixoto's GNU Emacs Config
#+AUTHOR: Lucas Peixoto de Almeida Cavalcante (lucaspeixotot)
#+DESCRIPTION: lucaspeixotot's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#package-manager][Package manager]]
  - [[#straight-bootstrap-script][Straight bootstrap script]]
  - [[#common-straight-setup][Common straight setup]]
  - [[#packages-setup][Packages setup]]
- [[#disable-native-compilation-warning][Disable native compilation warning]]
- [[#emacs-basic-settings][Emacs basic settings]]
  - [[#smooth-scrolling][Smooth scrolling]]
  - [[#gui][GUI]]
  - [[#font][FONT]]
  - [[#backup][Backup]]
  - [[#no-tabs][NO TABS]]
  - [[#zooming][Zooming]]
  - [[#buffer-move][BUFFER MOVE]]
  - [[#reload-emacs][RELOAD EMACS]]
- [[#ui][UI]]
  - [[#dashboard][Dashboard]]
  - [[#all-the-icons][ALL THE ICONS]]
  - [[#doom-modeline][Doom modeline]]
  - [[#doom-themes][Doom themes]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#path][Path]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
  - [[#multi-vterm][Multi vterm]]
- [[#org-mode][ORG MODE]]
- [[#keybindings][Keybindings]]
  - [[#general][GENERAL]]
  - [[#which-key][WHICH-KEY]]
- [[#better-movement][Better movement]]
  - [[#expand-region][Expand region]]
  - [[#move-text][Move text]]
  - [[#repeat-mode][Repeat mode]]
  - [[#avy][AVY]]
  - [[#ace-window][Ace window]]
  - [[#hydra][Hydra]]
- [[#completition-system][Completition system]]
  - [[#consult][Consult]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
  - [[#swiper][Swiper]]
- [[#ide][IDE]]
  - [[#treesit][TREESIT]]
  - [[#projectile][PROJECTILE]]
  - [[#auto-complete][AUTO COMPLETE]]
  - [[#languages][LANGUAGES]]
  - [[#treemacs][Treemacs]]
  - [[#yasnippet][Yasnippet]]
  - [[#eldoc][Eldoc]]
  - [[#eldoc-box][Eldoc box]]
  - [[#sideline][Sideline]]
  - [[#sideline-flymake][Sideline flymake]]
  - [[#poetry][Poetry]]
  - [[#eglot][Eglot]]
  - [[#consult-eglot][Consult eglot]]
  - [[#magit][Magit]]
  - [[#git-blamer][Git blamer]]
  - [[#doxygen][Doxygen]]
  - [[#header-line-which-function][Header line which function]]
  - [[#perspective-workspaces][Perspective (workspaces)]]
- [[#misc][Misc]]
  - [[#sudo-edit][SUDO EDIT]]
  - [[#undo-fu][undo fu]]
  - [[#save-place][Save place]]
  - [[#dired][DIRED]]
  - [[#keycast][Keycast]]
  - [[#zap-to-char][Zap to char]]

* Package manager
** Straight bootstrap script
This script is intended to download the bootstrap packaged and execute the install script.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
** Common straight setup
Replace use-package to straight.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src

** Packages setup
Adding needed packages sources and a folder for my custom packages like doxymacs.
#+begin_src emacs-lisp
;(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;(add-to-list 'package-archives
             ;'("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'load-path (expand-file-name "custom_packages" user-emacs-directory))
#+end_src
* Disable native compilation warning
When native compilation is enable a ton of warning errors are displayed. Supress them.
#+begin_src emacs-lisp
(setq native-comp-async-report-warnings-errors nil)
#+end_src


* Emacs basic settings
** Smooth scrolling
Create a better experience scrolling on emacs
#+begin_src emacs-lisp
(setq scroll-preserve-screen-position 1)
(setq scroll-conservatively 1000)
#+end_src
** GUI
A few UI Tweaks
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src
** FONT
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 100
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src
** Backup
#+begin_src emacs-lisp
;; Save all tempfiles in $TMPDIR/emacs$UID/                                                        
    (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
    (setq backup-directory-alist
        `((".*" . ,emacs-tmp-dir)))
    (setq auto-save-file-name-transforms
        `((".*" ,emacs-tmp-dir t)))
    (setq auto-save-list-file-prefix
        emacs-tmp-dir)
#+end_src
** NO TABS
Use spaces as tabs and set the number of it.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+end_src

** Zooming
Useful keybindgs to scale the text easily
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** BUFFER MOVE
Setup helper functions to move a buffer from one window to another one.
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

** RELOAD EMACS
Helper function to reload emacs easily.
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src


* UI
** Dashboard
Setup my dashboard window
#+begin_src emacs-lisp
  (use-package dashboard
   :straight t 
   :init
   (setq initial-buffer-choice 'dashboard-open)
   (setq dashboard-set-heading-icons t)
   (setq dashboard-set-file-icons t)
   (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
   ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
   ;; (setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
   (setq dashboard-center-content nil) ;; set to 't' for centered content
   (setq dashboard-items '((recents . 5)
                           (agenda . 5 )
                           (bookmarks . 3)
                           (projects . 3)
                           (registers . 3)))
   :custom
   (dashboard-modify-heading-icons '((recents . "file-text")
                                     (bookmarks . "book")))
   :config
   (dashboard-setup-startup-hook))
#+end_src

** ALL THE ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :straight t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
)
#+end_src

** Doom themes
#+begin_src emacs-lisp
(use-package doom-themes
  :straight t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-badger t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src


* SHELLS AND TERMINALS

** Path
#+begin_src emacs-lisp
(let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
  (setenv "PATH" path)
  (setq exec-path 
        (append
         (split-string-and-unquote path ":")
         exec-path)))
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
   :straight t
   :config
   (setq shell-file-name "/usr/bin/zsh"
      vterm-max-scrollback 50000))
#+end_src

** Vterm-Toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
  :straight t
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))




                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

** Multi vterm
#+begin_src emacs-lisp
(use-package multi-vterm
  :straight t
  )
#+end_src

* ORG MODE
#+begin_src emacs-lisp
  (use-package toc-org
    :straight t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :straight t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
#+end_src

#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

* Keybindings
** GENERAL
#+begin_src emacs-lisp
(use-package general
  :config
  (global-set-key (kbd "M-1") 'hydra-vi/body)
  (global-set-key (kbd "M-o") 'hydra-window/body)

  (general-create-definer c-c-leader
    :prefix "C-c"
    )

  (c-c-leader
    "h" '(:ignore t :wk "Hydra")
    "h f" '(hydra-files/body :wk "Hydra files")
    "h d" '(hydra-diagnostics/body :wk "Hydra diagnostics")
  )

  (c-c-leader
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm")
    "t f" '(multi-vterm-next :wk "Next vterminal")
    "t b" '(multi-vterm-prev :wk "Previous vterminal")
    )

  (c-c-leader
    "p" '(projectile-command-map :wk "Projectile"))
  )
#+end_src

** WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → " )
  )
 #+end_src


* Better movement

** Expand region
#+begin_src emacs-lisp
(use-package expand-region
  :straight t
  :bind ("C-0" . er/expand-region))
#+end_src

** Move text
#+begin_src emacs-lisp
(use-package move-text
:straight t
:config
(move-text-default-bindings)
)
#+end_src


** Repeat mode
#+begin_src emacs-lisp
(use-package repeat
:straight t
:hook (after-init . repeat-mode)
:config
)
#+end_src

** AVY
#+begin_src emacs-lisp
(use-package avy
  :straight t
  :bind (("M-RET" . avy-goto-char))
  )
#+end_src

** Ace window
#+begin_src emacs-lisp
       (use-package ace-window
         :straight t
         :config
         (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
         (setq aw-background nil)
         (defvar aw-dispatch-alist
           '((?x aw-delete-window "Delete Window")
             (?m aw-swap-window "Swap Windows")
             (?M aw-move-window "Move Window")
             (?c aw-copy-window "Copy Window")
             (?j aw-switch-buffer-in-window "Select Buffer")
             (?n aw-flip-window)
             (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
             (?c aw-split-window-fair "Split Fair Window")
             (?v aw-split-window-vert "Split Vert Window")
             (?b aw-split-window-horz "Split Horz Window")
             (?o delete-other-windows "Delete Other Windows")
             (?? aw-show-dispatch-help))
           "List of actions for `aw-dispatch-default'.")
        :bind
        ([remap other-window] . ace-window)
  )
#+end_src

** Hydra
#+begin_src emacs-lisp
(use-package hydra
  :straight t
  :bind (
         )
  :init
  (defhydra hydra-vi (:pre (set-cursor-color "#40e0d0")
                           :post (progn
                                   (set-cursor-color "#ffffff")
                                   (message
                                    "Thank you, come again.")))
    "vi"
    ("l" forward-char)
    ("h" backward-char)
    ("j" next-line)
    ("k" previous-line)
    ("a" beginning-of-line)
    ("e" end-of-line)
    ("d" forward-sentence)
    ("v" backward-sentence)
    ("L" recenter-top-bottom)
    ("RET" avy-goto-char)
    ("q" nil "quit"))

  (defhydra hydra-files
    (:color amaranth)
    "Jump to file system file"
    ("z" (find-file "~/.zshrc") "zshrc")
    ("c" (find-file "~/.emacs.d/config.org") "config.org")
    ("C" (reload-init-file) "reload init file")
    ("q" nil "quit")
    )

  (defhydra hydra-diagnostics 
    (:color amaranth)
    "Diagnostics"
    ("n" flymake-goto-next-error "next")
    ("p" flymake-goto-prev-error "prev")
    ("q" nil "quit")
    )

  (defhydra hydra-window (:color red)
"
 Split: _v_ert _x_:horz
Delete: _o_nly  _da_ce  _dw_indow  _db_uffer
  Goto: _h_:left _j_:down _k_:up _l_:right a_ce
  Move: _s_wap _H_:left _J_:down _K_:up _L_:right
  Misc: "
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("H" buf-move-left)
    ("J" buf-move-down)
    ("K" buf-move-up)
    ("L" buf-move-right)
    ("|" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right)))
    ("_" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down)))
    ("v" split-window-right)
    ("x" split-window-below)
    ("o" delete-other-windows :exit t)
    ("a" ace-window :exit t)
    ("s" ace-swap-window)
    ("da" ace-delete-window)
    ("dw" delete-window)
    ("db" kill-this-buffer)
    ("q" nil)
)
)
#+end_src
* Completition system
** Consult
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ;; ("C-c M-x" . consult-mode-command)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
  #+end_src

** Vertico
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** Orderless
#+begin_src emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src


** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src


** Embark
#+begin_src emacs-lisp
(defun embark-act-noquit ()
  "Run action but don't quit the minibuffer afterwards."
  (interactive)
  (let ((embark-quit-after-action nil))
    (embark-act)))


(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(setq embark-indicator nil)

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src


** Swiper
#+begin_src emacs-lisp
(use-package swiper
:config
(global-set-key "\C-s" 'swiper)
)

#+end_src
* IDE
** TREESIT
Enable tree sitter globally on emacs
#+begin_src emacs-lisp
(use-package treesit-auto
:straight t
:config
(global-treesit-auto-mode))
#+end_src

** PROJECTILE
Basic projectile setup
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode 1))
#+end_src

** AUTO COMPLETE
#+begin_src emacs-lisp
(use-package company
  :straight t
  :defer 2
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 1)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :straight t
  :hook (company-mode . company-box-mode))
#+end_src

** LANGUAGES
*** C/C++
#+begin_src emacs-lisp
(use-package c-ts-mode
  :straight t
  :hook ((c-ts-mode . eglot-ensure)
	 (c-ts-mode . company-mode))
  :mode (("\\.c\\'" . c-ts-mode)
	 ("\\.h\\'" . c-ts-mode)
	 )
:config
(setq treesit-font-lock-level 4)
(setq c-ts-mode-indent-offset 4)
  )
#+end_src
*** Python
#+begin_src emacs-lisp
(setq major-mode-remap-alist
      '((python-mode . python-ts-mode)))
(use-package python
:interpreter ("python3" . python-ts-mode)
:hook ((python-ts-mode . eglot-ensure))
)

(use-package pyenv
  :straight (:host github :repo "aiguofer/pyenv.el")
  :config
  (global-pyenv-mode))
#+end_src
*** Golang
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))

(use-package go-ts-mode
  :straight t
  :hook ((go-ts-mode . eglot-ensure)
	 (go-ts-mode . company-mode))
  :mode (("\\.go\\'" . go-ts-mode))
  :config
(setq treesit-font-lock-level 4)
(setq go-ts-mode-indent-offset 4)  
)

(use-package company-go
:straight t
:config
)

(use-package go-mode
:straight t)


#+end_src
** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :straight t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'right
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map

        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t f"   . treemacs-project-follow-mode)
        ("C-x t s"   . treemacs-select-window)
        ("C-x t t"   . treemacs)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))


(use-package treemacs-projectile
  :after (treemacs projectile)
  :straight t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :straight t)

(use-package treemacs-magit
  :after (treemacs magit)
  :straight t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :straight t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :straight t
  :config (treemacs-set-scope-type 'Tabs))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :hook
  (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all)
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets")))
#+end_src

** Eldoc
#+begin_src emacs-lisp
(use-package eldoc
:config
(setq eldoc-echo-area-use-multiline-p nil)
)

#+end_src

** Eldoc box
#+begin_src emacs-lisp
(use-package eldoc-box
:straight t
)
#+end_src

** Sideline
#+begin_src emacs-lisp
(use-package sideline
  :straight t
  :hook (flymake-mode . sideline-mode)
  :init
  (setq sideline-flymake-display-mode 'point) ; 'point to show errors only on point
                                              ; 'line to show errors on the current line
  (setq sideline-backends-right '(sideline-flymake)))
#+end_src

** Sideline flymake
#+begin_src emacs-lisp
(use-package sideline-flymake
:straight t
)
#+end_src

** Poetry
#+begin_src emacs-lisp
(use-package poetry
 :straight t)
#+end_src

** Eglot
#+begin_src emacs-lisp
(use-package eglot
:straight t
:bind 
(("M-2" . eglot-format))
)
#+end_src
** Consult eglot
#+begin_src emacs-lisp
(use-package consult-eglot
:straight t
)
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
:straight t
)
#+end_src


** Git blamer
#+begin_src emacs-lisp
(use-package blamer
  :straight t
  :bind (("C-c i" . blamer-show-posframe-commit-info))
  :defer 20
  :custom
  (blamer-idle-time 0.9)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                    :background nil
                    :height 100
                    :italic t)))
  :config
  ;; (global-blamer-mode 1)
  ;; (blamer-mode 1)
)
#+end_src

** Doxygen
#+begin_src emacs-lisp
(require 'doxymacs)
(add-hook 'c-mode-common-hook 'doxymacs-mode)
(defun my-doxymacs-font-lock-hook ()
  (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
	  (doxymacs-font-lock)))
(add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)
#+end_src


** Header line which function
#+begin_src emacs-lisp
(use-package breadcrumb
:straight t
:config
(breadcrumb-mode t)
)
#+end_src

** Perspective (workspaces)
#+begin_src emacs-lisp
(use-package perspective
  :bind
  ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
  :init
  (persp-mode)
  :config
  ;;(setq persp-state-default-file "~/.emacs.d/persp-save")
  (add-hook 'kill-emacs-hook #'persp-state-save)
)
#+end_src
* Misc

** SUDO EDIT
#+begin_src emacs-lisp
(use-package sudo-edit
  :straight t
  :config)
#+end_src

** undo fu
#+begin_src emacs-lisp
(use-package undo-fu
:straight t
:config
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-z")   'undo-fu-only-undo)
(global-set-key (kbd "C-S-z") 'undo-fu-only-redo)
)

(use-package undo-fu-session
:straight t
:config
(undo-fu-session-global-mode)
)

(use-package vundo
:straight t
)
#+end_src

** Save place
#+begin_src emacs-lisp
(use-package saveplace
:straight t
:config
:hook (after-init . save-place-mode)
)
#+end_src

** DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :straight t
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src

** Keycast
#+begin_src emacs-lisp
(use-package keycast
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  (add-to-list 'global-mode-string '("" keycast-mode-line)))
(keycast-mode t)
#+end_src

** Zap to char

#+begin_src emacs-lisp
(use-package avy-zap
:straight t
:config 
(global-set-key (kbd "M-z") 'avy-zap-to-char-dwim)
(global-set-key (kbd "M-Z") 'avy-zap-up-to-char-dwim)
)
#+end_src
